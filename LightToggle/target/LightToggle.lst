
/Users/abdulhannanmustajab/Desktop/Particle/LightToggle/LightToggle/target/LightToggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001248  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a1260  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         0000006c  20000300  080a1264  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000580  2000036c  2000036c  0003036c  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a12d0  080a12d0  000212d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a12f8  080a12f8  000212f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00090ebd  00000000  00000000  000212fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000d07e  00000000  00000000  000b21b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00011b37  00000000  00000000  000bf237  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001c90  00000000  00000000  000d0d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002f80  00000000  00000000  000d29fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000207df  00000000  00000000  000d597e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001d4cd  00000000  00000000  000f615d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00096aa7  00000000  00000000  0011362a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000aff0  00000000  00000000  001aa0d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	d8 0f 0a 08                                         ....

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f000 ff85 	bl	80a0f3c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f000 ff8a 	bl	80a0f52 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a1264 	.word	0x080a1264
 80a004c:	2000036c 	.word	0x2000036c
 80a0050:	2000036c 	.word	0x2000036c
 80a0054:	200008ec 	.word	0x200008ec
 80a0058:	200008ec 	.word	0x200008ec

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fd3d 	bl	80a0adc <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1228 	.word	0x080a1228
 80a0084:	080a1258 	.word	0x080a1258

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b82e 	b.w	80a00e8 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f841 	bl	80a0114 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bce3 	b.w	80a0a60 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 b975 	b.w	80a0388 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <_Z6toggle6String>:
 
  Particle.function("toggle",toggle);

}

int toggle(String command){
 80a00b0:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a00b2:	490a      	ldr	r1, [pc, #40]	; (80a00dc <_Z6toggle6String+0x2c>)
 80a00b4:	4605      	mov	r5, r0
 80a00b6:	f000 fb2e 	bl	80a0716 <_ZNK6String6equalsEPKc>

  if(command=="on"){
 80a00ba:	4604      	mov	r4, r0
 80a00bc:	b108      	cbz	r0, 80a00c2 <_Z6toggle6String+0x12>
    digitalWrite(led,1);
 80a00be:	2101      	movs	r1, #1
 80a00c0:	e005      	b.n	80a00ce <_Z6toggle6String+0x1e>
 80a00c2:	4907      	ldr	r1, [pc, #28]	; (80a00e0 <_Z6toggle6String+0x30>)
 80a00c4:	4628      	mov	r0, r5
 80a00c6:	f000 fb26 	bl	80a0716 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if(command=="off"){
 80a00ca:	b130      	cbz	r0, 80a00da <_Z6toggle6String+0x2a>
    digitalWrite(led,0);
 80a00cc:	4621      	mov	r1, r4
 80a00ce:	4b05      	ldr	r3, [pc, #20]	; (80a00e4 <_Z6toggle6String+0x34>)
 80a00d0:	8818      	ldrh	r0, [r3, #0]
 80a00d2:	f000 fd64 	bl	80a0b9e <digitalWrite>
 80a00d6:	2001      	movs	r0, #1
    return 1;
  }

}
 80a00d8:	bd38      	pop	{r3, r4, r5, pc}
 80a00da:	bd38      	pop	{r3, r4, r5, pc}
 80a00dc:	080a0fec 	.word	0x080a0fec
 80a00e0:	080a0fef 	.word	0x080a0fef
 80a00e4:	20000300 	.word	0x20000300

080a00e8 <setup>:

int led= D7;


// setup() runs once, when the device is first turned on.
void setup() {
 80a00e8:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.

  pinMode(led,OUTPUT);
 80a00ea:	4b06      	ldr	r3, [pc, #24]	; (80a0104 <setup+0x1c>)
 80a00ec:	2101      	movs	r1, #1
 80a00ee:	8818      	ldrh	r0, [r3, #0]
 80a00f0:	f000 fd44 	bl	80a0b7c <pinMode>
 
  Particle.function("toggle",toggle);

}
 80a00f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a00f8:	4a03      	ldr	r2, [pc, #12]	; (80a0108 <setup+0x20>)
 80a00fa:	4904      	ldr	r1, [pc, #16]	; (80a010c <setup+0x24>)
 80a00fc:	4804      	ldr	r0, [pc, #16]	; (80a0110 <setup+0x28>)
 80a00fe:	f000 b972 	b.w	80a03e6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0102:	bf00      	nop
 80a0104:	20000300 	.word	0x20000300
 80a0108:	080a0ff3 	.word	0x080a0ff3
 80a010c:	080a00b1 	.word	0x080a00b1
 80a0110:	080a03bb 	.word	0x080a03bb

080a0114 <loop>:
    return 1;
  }

}
// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a0114:	4770      	bx	lr

080a0116 <_GLOBAL__sub_I_led>:
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0116:	f000 b821 	b.w	80a015c <HAL_Pin_Map>
	...

080a011c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a011c:	b508      	push	{r3, lr}
 80a011e:	4b02      	ldr	r3, [pc, #8]	; (80a0128 <os_mutex_create+0xc>)
 80a0120:	681b      	ldr	r3, [r3, #0]
 80a0122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0124:	9301      	str	r3, [sp, #4]
 80a0126:	bd08      	pop	{r3, pc}
 80a0128:	080601d0 	.word	0x080601d0

080a012c <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80a012c:	b508      	push	{r3, lr}
 80a012e:	4b02      	ldr	r3, [pc, #8]	; (80a0138 <HAL_Core_Get_Last_Reset_Info+0xc>)
 80a0130:	681b      	ldr	r3, [r3, #0]
 80a0132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0134:	9301      	str	r3, [sp, #4]
 80a0136:	bd08      	pop	{r3, pc}
 80a0138:	080601b8 	.word	0x080601b8

080a013c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a013c:	b508      	push	{r3, lr}
 80a013e:	4b02      	ldr	r3, [pc, #8]	; (80a0148 <HAL_RNG_GetRandomNumber+0xc>)
 80a0140:	681b      	ldr	r3, [r3, #0]
 80a0142:	685b      	ldr	r3, [r3, #4]
 80a0144:	9301      	str	r3, [sp, #4]
 80a0146:	bd08      	pop	{r3, pc}
 80a0148:	0806019c 	.word	0x0806019c

080a014c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a014c:	b508      	push	{r3, lr}
 80a014e:	4b02      	ldr	r3, [pc, #8]	; (80a0158 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0150:	681b      	ldr	r3, [r3, #0]
 80a0152:	695b      	ldr	r3, [r3, #20]
 80a0154:	9301      	str	r3, [sp, #4]
 80a0156:	bd08      	pop	{r3, pc}
 80a0158:	0806019c 	.word	0x0806019c

080a015c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a015c:	b508      	push	{r3, lr}
 80a015e:	4b02      	ldr	r3, [pc, #8]	; (80a0168 <HAL_Pin_Map+0xc>)
 80a0160:	681b      	ldr	r3, [r3, #0]
 80a0162:	681b      	ldr	r3, [r3, #0]
 80a0164:	9301      	str	r3, [sp, #4]
 80a0166:	bd08      	pop	{r3, pc}
 80a0168:	080601b0 	.word	0x080601b0

080a016c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a016c:	b508      	push	{r3, lr}
 80a016e:	4b02      	ldr	r3, [pc, #8]	; (80a0178 <HAL_Pin_Mode+0xc>)
 80a0170:	681b      	ldr	r3, [r3, #0]
 80a0172:	689b      	ldr	r3, [r3, #8]
 80a0174:	9301      	str	r3, [sp, #4]
 80a0176:	bd08      	pop	{r3, pc}
 80a0178:	080601b0 	.word	0x080601b0

080a017c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a017c:	b508      	push	{r3, lr}
 80a017e:	4b02      	ldr	r3, [pc, #8]	; (80a0188 <HAL_Get_Pin_Mode+0xc>)
 80a0180:	681b      	ldr	r3, [r3, #0]
 80a0182:	68db      	ldr	r3, [r3, #12]
 80a0184:	9301      	str	r3, [sp, #4]
 80a0186:	bd08      	pop	{r3, pc}
 80a0188:	080601b0 	.word	0x080601b0

080a018c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a018c:	b508      	push	{r3, lr}
 80a018e:	4b02      	ldr	r3, [pc, #8]	; (80a0198 <HAL_GPIO_Write+0xc>)
 80a0190:	681b      	ldr	r3, [r3, #0]
 80a0192:	691b      	ldr	r3, [r3, #16]
 80a0194:	9301      	str	r3, [sp, #4]
 80a0196:	bd08      	pop	{r3, pc}
 80a0198:	080601b0 	.word	0x080601b0

080a019c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a019c:	b508      	push	{r3, lr}
 80a019e:	4b02      	ldr	r3, [pc, #8]	; (80a01a8 <HAL_I2C_Write_Data+0xc>)
 80a01a0:	681b      	ldr	r3, [r3, #0]
 80a01a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a01a4:	9301      	str	r3, [sp, #4]
 80a01a6:	bd08      	pop	{r3, pc}
 80a01a8:	080601ac 	.word	0x080601ac

080a01ac <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a01ac:	b508      	push	{r3, lr}
 80a01ae:	4b02      	ldr	r3, [pc, #8]	; (80a01b8 <HAL_I2C_Available_Data+0xc>)
 80a01b0:	681b      	ldr	r3, [r3, #0]
 80a01b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a01b4:	9301      	str	r3, [sp, #4]
 80a01b6:	bd08      	pop	{r3, pc}
 80a01b8:	080601ac 	.word	0x080601ac

080a01bc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a01bc:	b508      	push	{r3, lr}
 80a01be:	4b02      	ldr	r3, [pc, #8]	; (80a01c8 <HAL_I2C_Read_Data+0xc>)
 80a01c0:	681b      	ldr	r3, [r3, #0]
 80a01c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a01c4:	9301      	str	r3, [sp, #4]
 80a01c6:	bd08      	pop	{r3, pc}
 80a01c8:	080601ac 	.word	0x080601ac

080a01cc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a01cc:	b508      	push	{r3, lr}
 80a01ce:	4b02      	ldr	r3, [pc, #8]	; (80a01d8 <HAL_I2C_Peek_Data+0xc>)
 80a01d0:	681b      	ldr	r3, [r3, #0]
 80a01d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a01d4:	9301      	str	r3, [sp, #4]
 80a01d6:	bd08      	pop	{r3, pc}
 80a01d8:	080601ac 	.word	0x080601ac

080a01dc <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a01dc:	b508      	push	{r3, lr}
 80a01de:	4b02      	ldr	r3, [pc, #8]	; (80a01e8 <HAL_I2C_Flush_Data+0xc>)
 80a01e0:	681b      	ldr	r3, [r3, #0]
 80a01e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a01e4:	9301      	str	r3, [sp, #4]
 80a01e6:	bd08      	pop	{r3, pc}
 80a01e8:	080601ac 	.word	0x080601ac

080a01ec <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a01ec:	b508      	push	{r3, lr}
 80a01ee:	4b02      	ldr	r3, [pc, #8]	; (80a01f8 <HAL_I2C_Is_Enabled+0xc>)
 80a01f0:	681b      	ldr	r3, [r3, #0]
 80a01f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a01f4:	9301      	str	r3, [sp, #4]
 80a01f6:	bd08      	pop	{r3, pc}
 80a01f8:	080601ac 	.word	0x080601ac

080a01fc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a01fc:	b508      	push	{r3, lr}
 80a01fe:	4b03      	ldr	r3, [pc, #12]	; (80a020c <HAL_I2C_Init+0x10>)
 80a0200:	681b      	ldr	r3, [r3, #0]
 80a0202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0206:	9301      	str	r3, [sp, #4]
 80a0208:	bd08      	pop	{r3, pc}
 80a020a:	0000      	.short	0x0000
 80a020c:	080601ac 	.word	0x080601ac

080a0210 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0210:	b508      	push	{r3, lr}
 80a0212:	4b02      	ldr	r3, [pc, #8]	; (80a021c <HAL_SPI_Init+0xc>)
 80a0214:	681b      	ldr	r3, [r3, #0]
 80a0216:	69db      	ldr	r3, [r3, #28]
 80a0218:	9301      	str	r3, [sp, #4]
 80a021a:	bd08      	pop	{r3, pc}
 80a021c:	080601b4 	.word	0x080601b4

080a0220 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0220:	b508      	push	{r3, lr}
 80a0222:	4b02      	ldr	r3, [pc, #8]	; (80a022c <HAL_SPI_Is_Enabled+0xc>)
 80a0224:	681b      	ldr	r3, [r3, #0]
 80a0226:	6a1b      	ldr	r3, [r3, #32]
 80a0228:	9301      	str	r3, [sp, #4]
 80a022a:	bd08      	pop	{r3, pc}
 80a022c:	080601b4 	.word	0x080601b4

080a0230 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0230:	b508      	push	{r3, lr}
 80a0232:	4b02      	ldr	r3, [pc, #8]	; (80a023c <HAL_USART_Init+0xc>)
 80a0234:	681b      	ldr	r3, [r3, #0]
 80a0236:	699b      	ldr	r3, [r3, #24]
 80a0238:	9301      	str	r3, [sp, #4]
 80a023a:	bd08      	pop	{r3, pc}
 80a023c:	080601c4 	.word	0x080601c4

080a0240 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0240:	b508      	push	{r3, lr}
 80a0242:	4b02      	ldr	r3, [pc, #8]	; (80a024c <HAL_USART_Write_Data+0xc>)
 80a0244:	681b      	ldr	r3, [r3, #0]
 80a0246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0248:	9301      	str	r3, [sp, #4]
 80a024a:	bd08      	pop	{r3, pc}
 80a024c:	080601c4 	.word	0x080601c4

080a0250 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0250:	b508      	push	{r3, lr}
 80a0252:	4b02      	ldr	r3, [pc, #8]	; (80a025c <HAL_USART_Available_Data+0xc>)
 80a0254:	681b      	ldr	r3, [r3, #0]
 80a0256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0258:	9301      	str	r3, [sp, #4]
 80a025a:	bd08      	pop	{r3, pc}
 80a025c:	080601c4 	.word	0x080601c4

080a0260 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0260:	b508      	push	{r3, lr}
 80a0262:	4b02      	ldr	r3, [pc, #8]	; (80a026c <HAL_USART_Read_Data+0xc>)
 80a0264:	681b      	ldr	r3, [r3, #0]
 80a0266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0268:	9301      	str	r3, [sp, #4]
 80a026a:	bd08      	pop	{r3, pc}
 80a026c:	080601c4 	.word	0x080601c4

080a0270 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0270:	b508      	push	{r3, lr}
 80a0272:	4b02      	ldr	r3, [pc, #8]	; (80a027c <HAL_USART_Peek_Data+0xc>)
 80a0274:	681b      	ldr	r3, [r3, #0]
 80a0276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0278:	9301      	str	r3, [sp, #4]
 80a027a:	bd08      	pop	{r3, pc}
 80a027c:	080601c4 	.word	0x080601c4

080a0280 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0280:	b508      	push	{r3, lr}
 80a0282:	4b02      	ldr	r3, [pc, #8]	; (80a028c <HAL_USART_Flush_Data+0xc>)
 80a0284:	681b      	ldr	r3, [r3, #0]
 80a0286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0288:	9301      	str	r3, [sp, #4]
 80a028a:	bd08      	pop	{r3, pc}
 80a028c:	080601c4 	.word	0x080601c4

080a0290 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0290:	b508      	push	{r3, lr}
 80a0292:	4b02      	ldr	r3, [pc, #8]	; (80a029c <HAL_USART_Is_Enabled+0xc>)
 80a0294:	681b      	ldr	r3, [r3, #0]
 80a0296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0298:	9301      	str	r3, [sp, #4]
 80a029a:	bd08      	pop	{r3, pc}
 80a029c:	080601c4 	.word	0x080601c4

080a02a0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a02a0:	b508      	push	{r3, lr}
 80a02a2:	4b02      	ldr	r3, [pc, #8]	; (80a02ac <HAL_USART_Available_Data_For_Write+0xc>)
 80a02a4:	681b      	ldr	r3, [r3, #0]
 80a02a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a02a8:	9301      	str	r3, [sp, #4]
 80a02aa:	bd08      	pop	{r3, pc}
 80a02ac:	080601c4 	.word	0x080601c4

080a02b0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a02b0:	b508      	push	{r3, lr}
 80a02b2:	4b02      	ldr	r3, [pc, #8]	; (80a02bc <HAL_USB_USART_Init+0xc>)
 80a02b4:	681b      	ldr	r3, [r3, #0]
 80a02b6:	681b      	ldr	r3, [r3, #0]
 80a02b8:	9301      	str	r3, [sp, #4]
 80a02ba:	bd08      	pop	{r3, pc}
 80a02bc:	080601d8 	.word	0x080601d8

080a02c0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a02c0:	b508      	push	{r3, lr}
 80a02c2:	4b02      	ldr	r3, [pc, #8]	; (80a02cc <HAL_USB_USART_Available_Data+0xc>)
 80a02c4:	681b      	ldr	r3, [r3, #0]
 80a02c6:	691b      	ldr	r3, [r3, #16]
 80a02c8:	9301      	str	r3, [sp, #4]
 80a02ca:	bd08      	pop	{r3, pc}
 80a02cc:	080601d8 	.word	0x080601d8

080a02d0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a02d0:	b508      	push	{r3, lr}
 80a02d2:	4b02      	ldr	r3, [pc, #8]	; (80a02dc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a02d4:	681b      	ldr	r3, [r3, #0]
 80a02d6:	695b      	ldr	r3, [r3, #20]
 80a02d8:	9301      	str	r3, [sp, #4]
 80a02da:	bd08      	pop	{r3, pc}
 80a02dc:	080601d8 	.word	0x080601d8

080a02e0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a02e0:	b508      	push	{r3, lr}
 80a02e2:	4b02      	ldr	r3, [pc, #8]	; (80a02ec <HAL_USB_USART_Receive_Data+0xc>)
 80a02e4:	681b      	ldr	r3, [r3, #0]
 80a02e6:	699b      	ldr	r3, [r3, #24]
 80a02e8:	9301      	str	r3, [sp, #4]
 80a02ea:	bd08      	pop	{r3, pc}
 80a02ec:	080601d8 	.word	0x080601d8

080a02f0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a02f0:	b508      	push	{r3, lr}
 80a02f2:	4b02      	ldr	r3, [pc, #8]	; (80a02fc <HAL_USB_USART_Send_Data+0xc>)
 80a02f4:	681b      	ldr	r3, [r3, #0]
 80a02f6:	69db      	ldr	r3, [r3, #28]
 80a02f8:	9301      	str	r3, [sp, #4]
 80a02fa:	bd08      	pop	{r3, pc}
 80a02fc:	080601d8 	.word	0x080601d8

080a0300 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0300:	b508      	push	{r3, lr}
 80a0302:	4b02      	ldr	r3, [pc, #8]	; (80a030c <HAL_USB_USART_Flush_Data+0xc>)
 80a0304:	681b      	ldr	r3, [r3, #0]
 80a0306:	6a1b      	ldr	r3, [r3, #32]
 80a0308:	9301      	str	r3, [sp, #4]
 80a030a:	bd08      	pop	{r3, pc}
 80a030c:	080601d8 	.word	0x080601d8

080a0310 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0310:	b508      	push	{r3, lr}
 80a0312:	4b02      	ldr	r3, [pc, #8]	; (80a031c <set_system_mode+0xc>)
 80a0314:	681b      	ldr	r3, [r3, #0]
 80a0316:	685b      	ldr	r3, [r3, #4]
 80a0318:	9301      	str	r3, [sp, #4]
 80a031a:	bd08      	pop	{r3, pc}
 80a031c:	080601a4 	.word	0x080601a4

080a0320 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0320:	b508      	push	{r3, lr}
 80a0322:	4b03      	ldr	r3, [pc, #12]	; (80a0330 <system_ctrl_set_app_request_handler+0x10>)
 80a0324:	681b      	ldr	r3, [r3, #0]
 80a0326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a032a:	9301      	str	r3, [sp, #4]
 80a032c:	bd08      	pop	{r3, pc}
 80a032e:	0000      	.short	0x0000
 80a0330:	080601a4 	.word	0x080601a4

080a0334 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0334:	b508      	push	{r3, lr}
 80a0336:	4b03      	ldr	r3, [pc, #12]	; (80a0344 <system_ctrl_set_result+0x10>)
 80a0338:	681b      	ldr	r3, [r3, #0]
 80a033a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a033e:	9301      	str	r3, [sp, #4]
 80a0340:	bd08      	pop	{r3, pc}
 80a0342:	0000      	.short	0x0000
 80a0344:	080601a4 	.word	0x080601a4

080a0348 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a0348:	b508      	push	{r3, lr}
 80a034a:	4b02      	ldr	r3, [pc, #8]	; (80a0354 <spark_function+0xc>)
 80a034c:	681b      	ldr	r3, [r3, #0]
 80a034e:	685b      	ldr	r3, [r3, #4]
 80a0350:	9301      	str	r3, [sp, #4]
 80a0352:	bd08      	pop	{r3, pc}
 80a0354:	080601cc 	.word	0x080601cc

080a0358 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0358:	b508      	push	{r3, lr}
 80a035a:	4b02      	ldr	r3, [pc, #8]	; (80a0364 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a035c:	681b      	ldr	r3, [r3, #0]
 80a035e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0360:	9301      	str	r3, [sp, #4]
 80a0362:	bd08      	pop	{r3, pc}
 80a0364:	080601cc 	.word	0x080601cc

080a0368 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0368:	b508      	push	{r3, lr}
 80a036a:	4b02      	ldr	r3, [pc, #8]	; (80a0374 <network_ready+0xc>)
 80a036c:	681b      	ldr	r3, [r3, #0]
 80a036e:	691b      	ldr	r3, [r3, #16]
 80a0370:	9301      	str	r3, [sp, #4]
 80a0372:	bd08      	pop	{r3, pc}
 80a0374:	080601c8 	.word	0x080601c8

080a0378 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0378:	b508      	push	{r3, lr}
 80a037a:	4b02      	ldr	r3, [pc, #8]	; (80a0384 <malloc+0xc>)
 80a037c:	681b      	ldr	r3, [r3, #0]
 80a037e:	681b      	ldr	r3, [r3, #0]
 80a0380:	9301      	str	r3, [sp, #4]
 80a0382:	bd08      	pop	{r3, pc}
 80a0384:	080601a0 	.word	0x080601a0

080a0388 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0388:	b508      	push	{r3, lr}
 80a038a:	4b02      	ldr	r3, [pc, #8]	; (80a0394 <free+0xc>)
 80a038c:	681b      	ldr	r3, [r3, #0]
 80a038e:	685b      	ldr	r3, [r3, #4]
 80a0390:	9301      	str	r3, [sp, #4]
 80a0392:	bd08      	pop	{r3, pc}
 80a0394:	080601a0 	.word	0x080601a0

080a0398 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0398:	b508      	push	{r3, lr}
 80a039a:	4b02      	ldr	r3, [pc, #8]	; (80a03a4 <realloc+0xc>)
 80a039c:	681b      	ldr	r3, [r3, #0]
 80a039e:	689b      	ldr	r3, [r3, #8]
 80a03a0:	9301      	str	r3, [sp, #4]
 80a03a2:	bd08      	pop	{r3, pc}
 80a03a4:	080601a0 	.word	0x080601a0

080a03a8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a03a8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a03aa:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a03ac:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a03ae:	b113      	cbz	r3, 80a03b6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a03b0:	2203      	movs	r2, #3
 80a03b2:	4601      	mov	r1, r0
 80a03b4:	4798      	blx	r3
    }
 80a03b6:	4620      	mov	r0, r4
 80a03b8:	bd10      	pop	{r4, pc}

080a03ba <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a03ba:	b510      	push	{r4, lr}
 80a03bc:	b088      	sub	sp, #32
 80a03be:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a03c0:	4668      	mov	r0, sp
 80a03c2:	f000 f97b 	bl	80a06bc <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a03c6:	4669      	mov	r1, sp
 80a03c8:	a804      	add	r0, sp, #16
 80a03ca:	f000 f999 	bl	80a0700 <_ZN6StringC1ERKS_>
 80a03ce:	a804      	add	r0, sp, #16
 80a03d0:	47a0      	blx	r4
 80a03d2:	4604      	mov	r4, r0
 80a03d4:	a804      	add	r0, sp, #16
 80a03d6:	f000 f92a 	bl	80a062e <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a03da:	4668      	mov	r0, sp
 80a03dc:	f000 f927 	bl	80a062e <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a03e0:	4620      	mov	r0, r4
 80a03e2:	b008      	add	sp, #32
 80a03e4:	bd10      	pop	{r4, pc}

080a03e6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a03e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a03e8:	4607      	mov	r7, r0
 80a03ea:	460e      	mov	r6, r1
 80a03ec:	4615      	mov	r5, r2
 80a03ee:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 80a03f0:	2410      	movs	r4, #16
 80a03f2:	4622      	mov	r2, r4
 80a03f4:	2100      	movs	r1, #0
 80a03f6:	4668      	mov	r0, sp
 80a03f8:	f000 fdab 	bl	80a0f52 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a03fc:	2200      	movs	r2, #0
 80a03fe:	4669      	mov	r1, sp
 80a0400:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 80a0402:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 80a0406:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a0408:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a040a:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a040c:	f7ff ff9c 	bl	80a0348 <spark_function>
}
 80a0410:	b005      	add	sp, #20
 80a0412:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0414 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0414:	4770      	bx	lr

080a0416 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0418:	4606      	mov	r6, r0
 80a041a:	4615      	mov	r5, r2
 80a041c:	460c      	mov	r4, r1
 80a041e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0420:	42bc      	cmp	r4, r7
 80a0422:	d006      	beq.n	80a0432 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0424:	6833      	ldr	r3, [r6, #0]
 80a0426:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a042a:	689b      	ldr	r3, [r3, #8]
 80a042c:	4630      	mov	r0, r6
 80a042e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0430:	e7f6      	b.n	80a0420 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0432:	4628      	mov	r0, r5
 80a0434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0436 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0436:	2200      	movs	r2, #0
 80a0438:	7c00      	ldrb	r0, [r0, #16]
 80a043a:	f7ff beaf 	b.w	80a019c <HAL_I2C_Write_Data>

080a043e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a043e:	2100      	movs	r1, #0
 80a0440:	7c00      	ldrb	r0, [r0, #16]
 80a0442:	f7ff beb3 	b.w	80a01ac <HAL_I2C_Available_Data>

080a0446 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0446:	2100      	movs	r1, #0
 80a0448:	7c00      	ldrb	r0, [r0, #16]
 80a044a:	f7ff beb7 	b.w	80a01bc <HAL_I2C_Read_Data>

080a044e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a044e:	2100      	movs	r1, #0
 80a0450:	7c00      	ldrb	r0, [r0, #16]
 80a0452:	f7ff bebb 	b.w	80a01cc <HAL_I2C_Peek_Data>

080a0456 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0456:	2100      	movs	r1, #0
 80a0458:	7c00      	ldrb	r0, [r0, #16]
 80a045a:	f7ff bebf 	b.w	80a01dc <HAL_I2C_Flush_Data>

080a045e <_ZN7TwoWireD0Ev>:
 80a045e:	b510      	push	{r4, lr}
 80a0460:	4604      	mov	r4, r0
 80a0462:	f7ff fe1a 	bl	80a009a <_ZdlPv>
 80a0466:	4620      	mov	r0, r4
 80a0468:	bd10      	pop	{r4, pc}
	...

080a046c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a046c:	b510      	push	{r4, lr}
 80a046e:	4604      	mov	r4, r0
 80a0470:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0476:	60a3      	str	r3, [r4, #8]
 80a0478:	4b04      	ldr	r3, [pc, #16]	; (80a048c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a047a:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a047c:	7420      	strb	r0, [r4, #16]
 80a047e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0480:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a0482:	f7ff febb 	bl	80a01fc <HAL_I2C_Init>

}
 80a0486:	4620      	mov	r0, r4
 80a0488:	bd10      	pop	{r4, pc}
 80a048a:	bf00      	nop
 80a048c:	080a1004 	.word	0x080a1004

080a0490 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0490:	2100      	movs	r1, #0
 80a0492:	7c00      	ldrb	r0, [r0, #16]
 80a0494:	f7ff beaa 	b.w	80a01ec <HAL_I2C_Is_Enabled>

080a0498 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0498:	4770      	bx	lr

080a049a <_ZN9IPAddressD0Ev>:
 80a049a:	b510      	push	{r4, lr}
 80a049c:	4604      	mov	r4, r0
 80a049e:	f7ff fdfc 	bl	80a009a <_ZdlPv>
 80a04a2:	4620      	mov	r0, r4
 80a04a4:	bd10      	pop	{r4, pc}

080a04a6 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a04a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a04a8:	460f      	mov	r7, r1
 80a04aa:	f100 0608 	add.w	r6, r0, #8
 80a04ae:	1d05      	adds	r5, r0, #4
 80a04b0:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a04b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a04b6:	220a      	movs	r2, #10
 80a04b8:	4638      	mov	r0, r7
 80a04ba:	f000 f882 	bl	80a05c2 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a04be:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a04c0:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a04c2:	d007      	beq.n	80a04d4 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a04c4:	2c00      	cmp	r4, #0
 80a04c6:	d0f4      	beq.n	80a04b2 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a04c8:	212e      	movs	r1, #46	; 0x2e
 80a04ca:	4638      	mov	r0, r7
 80a04cc:	f000 f84c 	bl	80a0568 <_ZN5Print5printEc>
 80a04d0:	4404      	add	r4, r0
 80a04d2:	e7ee      	b.n	80a04b2 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a04d4:	4620      	mov	r0, r4
 80a04d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a04d8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a04d8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a04da:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a04de:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a04e2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a04e6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a04ea:	2304      	movs	r3, #4
 80a04ec:	6041      	str	r1, [r0, #4]
 80a04ee:	7503      	strb	r3, [r0, #20]
 80a04f0:	bd10      	pop	{r4, pc}
	...

080a04f4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a04f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a04f6:	4d04      	ldr	r5, [pc, #16]	; (80a0508 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a04f8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a04fa:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a04fe:	9500      	str	r5, [sp, #0]
 80a0500:	f7ff ffea 	bl	80a04d8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0504:	b003      	add	sp, #12
 80a0506:	bd30      	pop	{r4, r5, pc}
 80a0508:	080a102c 	.word	0x080a102c

080a050c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a050c:	4a01      	ldr	r2, [pc, #4]	; (80a0514 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a050e:	4b02      	ldr	r3, [pc, #8]	; (80a0518 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0510:	601a      	str	r2, [r3, #0]
 80a0512:	4770      	bx	lr
 80a0514:	080a10f1 	.word	0x080a10f1
 80a0518:	20000370 	.word	0x20000370

080a051c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a051e:	4606      	mov	r6, r0
 80a0520:	460d      	mov	r5, r1
 80a0522:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0524:	2400      	movs	r4, #0
  while (size--) {
 80a0526:	42bd      	cmp	r5, r7
 80a0528:	d00c      	beq.n	80a0544 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a052a:	6833      	ldr	r3, [r6, #0]
 80a052c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0530:	689b      	ldr	r3, [r3, #8]
 80a0532:	4630      	mov	r0, r6
 80a0534:	4798      	blx	r3
     if (chunk>=0)
 80a0536:	2800      	cmp	r0, #0
 80a0538:	db01      	blt.n	80a053e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a053a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a053c:	e7f3      	b.n	80a0526 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a053e:	2c00      	cmp	r4, #0
 80a0540:	bf08      	it	eq
 80a0542:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0544:	4620      	mov	r0, r4
 80a0546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0548 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0548:	b570      	push	{r4, r5, r6, lr}
 80a054a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a054c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a054e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0550:	b149      	cbz	r1, 80a0566 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0552:	f000 fd39 	bl	80a0fc8 <strlen>
 80a0556:	682b      	ldr	r3, [r5, #0]
 80a0558:	4602      	mov	r2, r0
 80a055a:	4621      	mov	r1, r4
 80a055c:	4628      	mov	r0, r5
    }
 80a055e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0562:	68db      	ldr	r3, [r3, #12]
 80a0564:	4718      	bx	r3
    }
 80a0566:	bd70      	pop	{r4, r5, r6, pc}

080a0568 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0568:	6803      	ldr	r3, [r0, #0]
 80a056a:	689b      	ldr	r3, [r3, #8]
 80a056c:	4718      	bx	r3

080a056e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a056e:	2a01      	cmp	r2, #1
 80a0570:	bf98      	it	ls
 80a0572:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0574:	b530      	push	{r4, r5, lr}
 80a0576:	460b      	mov	r3, r1
 80a0578:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a057a:	2100      	movs	r1, #0
 80a057c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0580:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0584:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0588:	fb05 3312 	mls	r3, r5, r2, r3
 80a058c:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a058e:	2b09      	cmp	r3, #9
 80a0590:	bf94      	ite	ls
 80a0592:	3330      	addls	r3, #48	; 0x30
 80a0594:	3337      	addhi	r3, #55	; 0x37
 80a0596:	b2db      	uxtb	r3, r3
 80a0598:	4621      	mov	r1, r4
 80a059a:	f804 3901 	strb.w	r3, [r4], #-1
 80a059e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a05a0:	2d00      	cmp	r5, #0
 80a05a2:	d1ef      	bne.n	80a0584 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a05a4:	f7ff ffd0 	bl	80a0548 <_ZN5Print5writeEPKc>
}
 80a05a8:	b00b      	add	sp, #44	; 0x2c
 80a05aa:	bd30      	pop	{r4, r5, pc}

080a05ac <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a05ac:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a05ae:	b922      	cbnz	r2, 80a05ba <_ZN5Print5printEmi+0xe>
 80a05b0:	6803      	ldr	r3, [r0, #0]
 80a05b2:	b2c9      	uxtb	r1, r1
 80a05b4:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a05b6:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a05b8:	4718      	bx	r3
  else return printNumber(n, base);
 80a05ba:	b2d2      	uxtb	r2, r2
}
 80a05bc:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a05be:	f7ff bfd6 	b.w	80a056e <_ZN5Print11printNumberEmh>

080a05c2 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a05c2:	f7ff bff3 	b.w	80a05ac <_ZN5Print5printEmi>

080a05c6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a05c6:	b510      	push	{r4, lr}
 80a05c8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a05ca:	f7ff feed 	bl	80a03a8 <_ZNSt14_Function_baseD1Ev>
 80a05ce:	4620      	mov	r0, r4
 80a05d0:	bd10      	pop	{r4, pc}
	...

080a05d4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a05d4:	4803      	ldr	r0, [pc, #12]	; (80a05e4 <_GLOBAL__sub_I_RGB+0x10>)
 80a05d6:	2300      	movs	r3, #0
 80a05d8:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a05da:	4a03      	ldr	r2, [pc, #12]	; (80a05e8 <_GLOBAL__sub_I_RGB+0x14>)
 80a05dc:	4903      	ldr	r1, [pc, #12]	; (80a05ec <_GLOBAL__sub_I_RGB+0x18>)
 80a05de:	f000 bb51 	b.w	80a0c84 <__aeabi_atexit>
 80a05e2:	bf00      	nop
 80a05e4:	20000374 	.word	0x20000374
 80a05e8:	2000036c 	.word	0x2000036c
 80a05ec:	080a05c7 	.word	0x080a05c7

080a05f0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a05f0:	4770      	bx	lr

080a05f2 <_ZN8SPIClassD0Ev>:
 80a05f2:	b510      	push	{r4, lr}
 80a05f4:	4604      	mov	r4, r0
 80a05f6:	f7ff fd50 	bl	80a009a <_ZdlPv>
 80a05fa:	4620      	mov	r0, r4
 80a05fc:	bd10      	pop	{r4, pc}
	...

080a0600 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0600:	b570      	push	{r4, r5, r6, lr}
 80a0602:	4604      	mov	r4, r0
 80a0604:	460e      	mov	r6, r1
 80a0606:	4b07      	ldr	r3, [pc, #28]	; (80a0624 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0608:	2500      	movs	r5, #0
 80a060a:	6003      	str	r3, [r0, #0]
 80a060c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0610:	f7ff fd84 	bl	80a011c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0614:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0616:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0618:	f7ff fdfa 	bl	80a0210 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a061c:	60a5      	str	r5, [r4, #8]
}
 80a061e:	4620      	mov	r0, r4
 80a0620:	bd70      	pop	{r4, r5, r6, pc}
 80a0622:	bf00      	nop
 80a0624:	080a1124 	.word	0x080a1124

080a0628 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0628:	7900      	ldrb	r0, [r0, #4]
 80a062a:	f7ff bdf9 	b.w	80a0220 <HAL_SPI_Is_Enabled>

080a062e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a062e:	b510      	push	{r4, lr}
 80a0630:	4604      	mov	r4, r0
{
	free(buffer);
 80a0632:	6800      	ldr	r0, [r0, #0]
 80a0634:	f7ff fea8 	bl	80a0388 <free>
}
 80a0638:	4620      	mov	r0, r4
 80a063a:	bd10      	pop	{r4, pc}

080a063c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a063c:	b510      	push	{r4, lr}
 80a063e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0640:	6800      	ldr	r0, [r0, #0]
 80a0642:	b108      	cbz	r0, 80a0648 <_ZN6String10invalidateEv+0xc>
 80a0644:	f7ff fea0 	bl	80a0388 <free>
	buffer = NULL;
 80a0648:	2300      	movs	r3, #0
 80a064a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a064c:	60a3      	str	r3, [r4, #8]
 80a064e:	6063      	str	r3, [r4, #4]
 80a0650:	bd10      	pop	{r4, pc}

080a0652 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0652:	b538      	push	{r3, r4, r5, lr}
 80a0654:	4604      	mov	r4, r0
 80a0656:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0658:	6800      	ldr	r0, [r0, #0]
 80a065a:	3101      	adds	r1, #1
 80a065c:	f7ff fe9c 	bl	80a0398 <realloc>
	if (newbuffer) {
 80a0660:	b110      	cbz	r0, 80a0668 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0662:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a0666:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0668:	bd38      	pop	{r3, r4, r5, pc}

080a066a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a066a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a066c:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a066e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0670:	b113      	cbz	r3, 80a0678 <_ZN6String7reserveEj+0xe>
 80a0672:	6843      	ldr	r3, [r0, #4]
 80a0674:	428b      	cmp	r3, r1
 80a0676:	d207      	bcs.n	80a0688 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0678:	4620      	mov	r0, r4
 80a067a:	f7ff ffea 	bl	80a0652 <_ZN6String12changeBufferEj>
 80a067e:	b120      	cbz	r0, 80a068a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a0680:	68a3      	ldr	r3, [r4, #8]
 80a0682:	b90b      	cbnz	r3, 80a0688 <_ZN6String7reserveEj+0x1e>
 80a0684:	6822      	ldr	r2, [r4, #0]
 80a0686:	7013      	strb	r3, [r2, #0]
 80a0688:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a068a:	bd10      	pop	{r4, pc}

080a068c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a068c:	b570      	push	{r4, r5, r6, lr}
 80a068e:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0690:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0692:	4604      	mov	r4, r0
 80a0694:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0696:	f7ff ffe8 	bl	80a066a <_ZN6String7reserveEj>
 80a069a:	b918      	cbnz	r0, 80a06a4 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a069c:	4620      	mov	r0, r4
 80a069e:	f7ff ffcd 	bl	80a063c <_ZN6String10invalidateEv>
		return *this;
 80a06a2:	e009      	b.n	80a06b8 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a06a4:	462a      	mov	r2, r5
 80a06a6:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a06a8:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a06aa:	6820      	ldr	r0, [r4, #0]
 80a06ac:	f000 fc46 	bl	80a0f3c <memcpy>
	buffer[len] = 0;
 80a06b0:	6822      	ldr	r2, [r4, #0]
 80a06b2:	68a3      	ldr	r3, [r4, #8]
 80a06b4:	2100      	movs	r1, #0
 80a06b6:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a06b8:	4620      	mov	r0, r4
 80a06ba:	bd70      	pop	{r4, r5, r6, pc}

080a06bc <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a06bc:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a06be:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a06c0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a06c2:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a06c4:	6043      	str	r3, [r0, #4]
	len = 0;
 80a06c6:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a06c8:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a06ca:	460d      	mov	r5, r1
 80a06cc:	b139      	cbz	r1, 80a06de <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a06ce:	4608      	mov	r0, r1
 80a06d0:	f000 fc7a 	bl	80a0fc8 <strlen>
 80a06d4:	4629      	mov	r1, r5
 80a06d6:	4602      	mov	r2, r0
 80a06d8:	4620      	mov	r0, r4
 80a06da:	f7ff ffd7 	bl	80a068c <_ZN6String4copyEPKcj>
}
 80a06de:	4620      	mov	r0, r4
 80a06e0:	bd38      	pop	{r3, r4, r5, pc}

080a06e2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a06e2:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a06e4:	b510      	push	{r4, lr}
 80a06e6:	460b      	mov	r3, r1
 80a06e8:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a06ea:	d007      	beq.n	80a06fc <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a06ec:	6809      	ldr	r1, [r1, #0]
 80a06ee:	b119      	cbz	r1, 80a06f8 <_ZN6StringaSERKS_+0x16>
 80a06f0:	689a      	ldr	r2, [r3, #8]
 80a06f2:	f7ff ffcb 	bl	80a068c <_ZN6String4copyEPKcj>
 80a06f6:	e001      	b.n	80a06fc <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a06f8:	f7ff ffa0 	bl	80a063c <_ZN6String10invalidateEv>

	return *this;
}
 80a06fc:	4620      	mov	r0, r4
 80a06fe:	bd10      	pop	{r4, pc}

080a0700 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a0700:	b510      	push	{r4, lr}
 80a0702:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0704:	2300      	movs	r3, #0
 80a0706:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0708:	6043      	str	r3, [r0, #4]
	len = 0;
 80a070a:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a070c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a070e:	f7ff ffe8 	bl	80a06e2 <_ZN6StringaSERKS_>
}
 80a0712:	4620      	mov	r0, r4
 80a0714:	bd10      	pop	{r4, pc}

080a0716 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a0716:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a0718:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a071a:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a071c:	b912      	cbnz	r2, 80a0724 <_ZNK6String6equalsEPKc+0xe>
 80a071e:	b919      	cbnz	r1, 80a0728 <_ZNK6String6equalsEPKc+0x12>
 80a0720:	2001      	movs	r0, #1
 80a0722:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a0724:	b911      	cbnz	r1, 80a072c <_ZNK6String6equalsEPKc+0x16>
 80a0726:	6803      	ldr	r3, [r0, #0]
 80a0728:	7818      	ldrb	r0, [r3, #0]
 80a072a:	e002      	b.n	80a0732 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a072c:	6800      	ldr	r0, [r0, #0]
 80a072e:	f000 fc41 	bl	80a0fb4 <strcmp>
 80a0732:	fab0 f080 	clz	r0, r0
 80a0736:	0940      	lsrs	r0, r0, #5
}
 80a0738:	bd08      	pop	{r3, pc}
	...

080a073c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a073c:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80a0740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0742:	4c0d      	ldr	r4, [pc, #52]	; (80a0778 <_GLOBAL__sub_I_System+0x3c>)
 80a0744:	2500      	movs	r5, #0
 80a0746:	8063      	strh	r3, [r4, #2]
 80a0748:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a074c:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a074e:	80a3      	strh	r3, [r4, #4]
 80a0750:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0752:	f7ff fddd 	bl	80a0310 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a0756:	a802      	add	r0, sp, #8
 80a0758:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a075c:	462a      	mov	r2, r5
 80a075e:	4629      	mov	r1, r5
 80a0760:	f7ff fce4 	bl	80a012c <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a0764:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a0766:	2b1e      	cmp	r3, #30
 80a0768:	d104      	bne.n	80a0774 <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a076a:	2303      	movs	r3, #3
 80a076c:	7023      	strb	r3, [r4, #0]
 80a076e:	2311      	movs	r3, #17
 80a0770:	8065      	strh	r5, [r4, #2]
 80a0772:	80a3      	strh	r3, [r4, #4]
 80a0774:	b003      	add	sp, #12
 80a0776:	bd30      	pop	{r4, r5, pc}
 80a0778:	20000384 	.word	0x20000384

080a077c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a077c:	4b02      	ldr	r3, [pc, #8]	; (80a0788 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a077e:	681a      	ldr	r2, [r3, #0]
 80a0780:	4b02      	ldr	r3, [pc, #8]	; (80a078c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0782:	601a      	str	r2, [r3, #0]
 80a0784:	4770      	bx	lr
 80a0786:	bf00      	nop
 80a0788:	20000304 	.word	0x20000304
 80a078c:	2000038c 	.word	0x2000038c

080a0790 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0790:	4770      	bx	lr

080a0792 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0792:	7441      	strb	r1, [r0, #17]
 80a0794:	4770      	bx	lr

080a0796 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a0796:	7c00      	ldrb	r0, [r0, #16]
 80a0798:	f7ff bd82 	b.w	80a02a0 <HAL_USART_Available_Data_For_Write>

080a079c <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a079c:	7c00      	ldrb	r0, [r0, #16]
 80a079e:	f7ff bd57 	b.w	80a0250 <HAL_USART_Available_Data>

080a07a2 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a07a2:	7c00      	ldrb	r0, [r0, #16]
 80a07a4:	f7ff bd64 	b.w	80a0270 <HAL_USART_Peek_Data>

080a07a8 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a07a8:	7c00      	ldrb	r0, [r0, #16]
 80a07aa:	f7ff bd59 	b.w	80a0260 <HAL_USART_Read_Data>

080a07ae <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a07ae:	7c00      	ldrb	r0, [r0, #16]
 80a07b0:	f7ff bd66 	b.w	80a0280 <HAL_USART_Flush_Data>

080a07b4 <_ZN11USARTSerialD0Ev>:
 80a07b4:	b510      	push	{r4, lr}
 80a07b6:	4604      	mov	r4, r0
 80a07b8:	f7ff fc6f 	bl	80a009a <_ZdlPv>
 80a07bc:	4620      	mov	r0, r4
 80a07be:	bd10      	pop	{r4, pc}

080a07c0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a07c0:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a07c2:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a07c4:	4604      	mov	r4, r0
 80a07c6:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a07c8:	b925      	cbnz	r5, 80a07d4 <_ZN11USARTSerial5writeEh+0x14>
 80a07ca:	7c00      	ldrb	r0, [r0, #16]
 80a07cc:	f7ff fd68 	bl	80a02a0 <HAL_USART_Available_Data_For_Write>
 80a07d0:	2800      	cmp	r0, #0
 80a07d2:	dd05      	ble.n	80a07e0 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a07d4:	4631      	mov	r1, r6
 80a07d6:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a07d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a07dc:	f7ff bd30 	b.w	80a0240 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a07e0:	4628      	mov	r0, r5
 80a07e2:	bd70      	pop	{r4, r5, r6, pc}

080a07e4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a07e4:	b510      	push	{r4, lr}
 80a07e6:	4604      	mov	r4, r0
 80a07e8:	4608      	mov	r0, r1
 80a07ea:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a07ec:	2200      	movs	r2, #0
 80a07ee:	6062      	str	r2, [r4, #4]
 80a07f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a07f4:	60a2      	str	r2, [r4, #8]
 80a07f6:	4a05      	ldr	r2, [pc, #20]	; (80a080c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a07f8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a07fa:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a07fc:	2201      	movs	r2, #1
 80a07fe:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0800:	461a      	mov	r2, r3
 80a0802:	f7ff fd15 	bl	80a0230 <HAL_USART_Init>
}
 80a0806:	4620      	mov	r0, r4
 80a0808:	bd10      	pop	{r4, pc}
 80a080a:	bf00      	nop
 80a080c:	080a1160 	.word	0x080a1160

080a0810 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a0810:	7c00      	ldrb	r0, [r0, #16]
 80a0812:	f7ff bd3d 	b.w	80a0290 <HAL_USART_Is_Enabled>
	...

080a0818 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0818:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a081a:	4d0c      	ldr	r5, [pc, #48]	; (80a084c <_Z22__fetch_global_Serial1v+0x34>)
 80a081c:	6829      	ldr	r1, [r5, #0]
 80a081e:	f011 0401 	ands.w	r4, r1, #1
 80a0822:	d111      	bne.n	80a0848 <_Z22__fetch_global_Serial1v+0x30>
 80a0824:	4628      	mov	r0, r5
 80a0826:	f7ff fc3a 	bl	80a009e <__cxa_guard_acquire>
 80a082a:	b168      	cbz	r0, 80a0848 <_Z22__fetch_global_Serial1v+0x30>
 80a082c:	4a08      	ldr	r2, [pc, #32]	; (80a0850 <_Z22__fetch_global_Serial1v+0x38>)
 80a082e:	4621      	mov	r1, r4
 80a0830:	4b08      	ldr	r3, [pc, #32]	; (80a0854 <_Z22__fetch_global_Serial1v+0x3c>)
 80a0832:	4809      	ldr	r0, [pc, #36]	; (80a0858 <_Z22__fetch_global_Serial1v+0x40>)
 80a0834:	f7ff ffd6 	bl	80a07e4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0838:	4628      	mov	r0, r5
 80a083a:	f7ff fc35 	bl	80a00a8 <__cxa_guard_release>
 80a083e:	4a07      	ldr	r2, [pc, #28]	; (80a085c <_Z22__fetch_global_Serial1v+0x44>)
 80a0840:	4907      	ldr	r1, [pc, #28]	; (80a0860 <_Z22__fetch_global_Serial1v+0x48>)
 80a0842:	4805      	ldr	r0, [pc, #20]	; (80a0858 <_Z22__fetch_global_Serial1v+0x40>)
 80a0844:	f000 fa1e 	bl	80a0c84 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0848:	4803      	ldr	r0, [pc, #12]	; (80a0858 <_Z22__fetch_global_Serial1v+0x40>)
 80a084a:	bd38      	pop	{r3, r4, r5, pc}
 80a084c:	20000428 	.word	0x20000428
 80a0850:	2000042c 	.word	0x2000042c
 80a0854:	200003a4 	.word	0x200003a4
 80a0858:	20000390 	.word	0x20000390
 80a085c:	2000036c 	.word	0x2000036c
 80a0860:	080a0791 	.word	0x080a0791

080a0864 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0864:	7441      	strb	r1, [r0, #17]
 80a0866:	4770      	bx	lr

080a0868 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a0868:	4770      	bx	lr

080a086a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a086a:	2100      	movs	r1, #0
 80a086c:	7c00      	ldrb	r0, [r0, #16]
 80a086e:	f7ff bd37 	b.w	80a02e0 <HAL_USB_USART_Receive_Data>

080a0872 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a0872:	2101      	movs	r1, #1
 80a0874:	7c00      	ldrb	r0, [r0, #16]
 80a0876:	f7ff bd33 	b.w	80a02e0 <HAL_USB_USART_Receive_Data>

080a087a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a087a:	7c00      	ldrb	r0, [r0, #16]
 80a087c:	f7ff bd28 	b.w	80a02d0 <HAL_USB_USART_Available_Data_For_Write>

080a0880 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a0880:	7c00      	ldrb	r0, [r0, #16]
 80a0882:	f7ff bd1d 	b.w	80a02c0 <HAL_USB_USART_Available_Data>

080a0886 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a0886:	b538      	push	{r3, r4, r5, lr}
 80a0888:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a088a:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a088c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a088e:	f7ff fd1f 	bl	80a02d0 <HAL_USB_USART_Available_Data_For_Write>
 80a0892:	2800      	cmp	r0, #0
 80a0894:	dc01      	bgt.n	80a089a <_ZN9USBSerial5writeEh+0x14>
 80a0896:	7c60      	ldrb	r0, [r4, #17]
 80a0898:	b120      	cbz	r0, 80a08a4 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a089a:	4629      	mov	r1, r5
 80a089c:	7c20      	ldrb	r0, [r4, #16]
 80a089e:	f7ff fd27 	bl	80a02f0 <HAL_USB_USART_Send_Data>
    return 1;
 80a08a2:	2001      	movs	r0, #1
  }
  return 0;
}
 80a08a4:	bd38      	pop	{r3, r4, r5, pc}

080a08a6 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a08a6:	7c00      	ldrb	r0, [r0, #16]
 80a08a8:	f7ff bd2a 	b.w	80a0300 <HAL_USB_USART_Flush_Data>

080a08ac <_ZN9USBSerialD0Ev>:
 80a08ac:	b510      	push	{r4, lr}
 80a08ae:	4604      	mov	r4, r0
 80a08b0:	f7ff fbf3 	bl	80a009a <_ZdlPv>
 80a08b4:	4620      	mov	r0, r4
 80a08b6:	bd10      	pop	{r4, pc}

080a08b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a08b8:	b510      	push	{r4, lr}
 80a08ba:	4604      	mov	r4, r0
 80a08bc:	2300      	movs	r3, #0
 80a08be:	6063      	str	r3, [r4, #4]
 80a08c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a08c4:	60a3      	str	r3, [r4, #8]
 80a08c6:	4b05      	ldr	r3, [pc, #20]	; (80a08dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a08c8:	4608      	mov	r0, r1
 80a08ca:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a08cc:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a08ce:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a08d0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a08d2:	4611      	mov	r1, r2
 80a08d4:	f7ff fcec 	bl	80a02b0 <HAL_USB_USART_Init>
}
 80a08d8:	4620      	mov	r0, r4
 80a08da:	bd10      	pop	{r4, pc}
 80a08dc:	080a1190 	.word	0x080a1190

080a08e0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a08e0:	b510      	push	{r4, lr}
 80a08e2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a08e4:	2214      	movs	r2, #20
 80a08e6:	2100      	movs	r1, #0
 80a08e8:	f000 fb33 	bl	80a0f52 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a08ec:	4b05      	ldr	r3, [pc, #20]	; (80a0904 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a08ee:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a08f0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a08f2:	4b05      	ldr	r3, [pc, #20]	; (80a0908 <_Z19acquireSerialBufferv+0x28>)
 80a08f4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a08f6:	f240 1301 	movw	r3, #257	; 0x101
 80a08fa:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a08fc:	2381      	movs	r3, #129	; 0x81
 80a08fe:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0900:	bd10      	pop	{r4, pc}
 80a0902:	bf00      	nop
 80a0904:	20000535 	.word	0x20000535
 80a0908:	200004b4 	.word	0x200004b4

080a090c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a090c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a090e:	4d0e      	ldr	r5, [pc, #56]	; (80a0948 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0910:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0912:	a801      	add	r0, sp, #4
 80a0914:	f7ff ffe4 	bl	80a08e0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0918:	6829      	ldr	r1, [r5, #0]
 80a091a:	f011 0401 	ands.w	r4, r1, #1
 80a091e:	d110      	bne.n	80a0942 <_Z16_fetch_usbserialv+0x36>
 80a0920:	4628      	mov	r0, r5
 80a0922:	f7ff fbbc 	bl	80a009e <__cxa_guard_acquire>
 80a0926:	b160      	cbz	r0, 80a0942 <_Z16_fetch_usbserialv+0x36>
 80a0928:	aa01      	add	r2, sp, #4
 80a092a:	4621      	mov	r1, r4
 80a092c:	4807      	ldr	r0, [pc, #28]	; (80a094c <_Z16_fetch_usbserialv+0x40>)
 80a092e:	f7ff ffc3 	bl	80a08b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0932:	4628      	mov	r0, r5
 80a0934:	f7ff fbb8 	bl	80a00a8 <__cxa_guard_release>
 80a0938:	4a05      	ldr	r2, [pc, #20]	; (80a0950 <_Z16_fetch_usbserialv+0x44>)
 80a093a:	4906      	ldr	r1, [pc, #24]	; (80a0954 <_Z16_fetch_usbserialv+0x48>)
 80a093c:	4803      	ldr	r0, [pc, #12]	; (80a094c <_Z16_fetch_usbserialv+0x40>)
 80a093e:	f000 f9a1 	bl	80a0c84 <__aeabi_atexit>
	return _usbserial;
}
 80a0942:	4802      	ldr	r0, [pc, #8]	; (80a094c <_Z16_fetch_usbserialv+0x40>)
 80a0944:	b007      	add	sp, #28
 80a0946:	bd30      	pop	{r4, r5, pc}
 80a0948:	200004b0 	.word	0x200004b0
 80a094c:	20000638 	.word	0x20000638
 80a0950:	2000036c 	.word	0x2000036c
 80a0954:	080a0869 	.word	0x080a0869

080a0958 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0958:	b510      	push	{r4, lr}
 80a095a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a095c:	2214      	movs	r2, #20
 80a095e:	2100      	movs	r1, #0
 80a0960:	f000 faf7 	bl	80a0f52 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0964:	4b05      	ldr	r3, [pc, #20]	; (80a097c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0966:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0968:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a096a:	4b05      	ldr	r3, [pc, #20]	; (80a0980 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a096c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a096e:	f240 1301 	movw	r3, #257	; 0x101
 80a0972:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0974:	2381      	movs	r3, #129	; 0x81
 80a0976:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0978:	bd10      	pop	{r4, pc}
 80a097a:	bf00      	nop
 80a097c:	200006e8 	.word	0x200006e8
 80a0980:	20000650 	.word	0x20000650

080a0984 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0984:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0986:	4c0e      	ldr	r4, [pc, #56]	; (80a09c0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0988:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a098a:	a801      	add	r0, sp, #4
 80a098c:	f7ff ffe4 	bl	80a0958 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0990:	6823      	ldr	r3, [r4, #0]
 80a0992:	07db      	lsls	r3, r3, #31
 80a0994:	d410      	bmi.n	80a09b8 <_Z17_fetch_usbserial1v+0x34>
 80a0996:	4620      	mov	r0, r4
 80a0998:	f7ff fb81 	bl	80a009e <__cxa_guard_acquire>
 80a099c:	b160      	cbz	r0, 80a09b8 <_Z17_fetch_usbserial1v+0x34>
 80a099e:	aa01      	add	r2, sp, #4
 80a09a0:	2101      	movs	r1, #1
 80a09a2:	4808      	ldr	r0, [pc, #32]	; (80a09c4 <_Z17_fetch_usbserial1v+0x40>)
 80a09a4:	f7ff ff88 	bl	80a08b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a09a8:	4620      	mov	r0, r4
 80a09aa:	f7ff fb7d 	bl	80a00a8 <__cxa_guard_release>
 80a09ae:	4a06      	ldr	r2, [pc, #24]	; (80a09c8 <_Z17_fetch_usbserial1v+0x44>)
 80a09b0:	4906      	ldr	r1, [pc, #24]	; (80a09cc <_Z17_fetch_usbserial1v+0x48>)
 80a09b2:	4804      	ldr	r0, [pc, #16]	; (80a09c4 <_Z17_fetch_usbserial1v+0x40>)
 80a09b4:	f000 f966 	bl	80a0c84 <__aeabi_atexit>
  return _usbserial1;
}
 80a09b8:	4802      	ldr	r0, [pc, #8]	; (80a09c4 <_Z17_fetch_usbserial1v+0x40>)
 80a09ba:	b006      	add	sp, #24
 80a09bc:	bd10      	pop	{r4, pc}
 80a09be:	bf00      	nop
 80a09c0:	2000064c 	.word	0x2000064c
 80a09c4:	200006d4 	.word	0x200006d4
 80a09c8:	2000036c 	.word	0x2000036c
 80a09cc:	080a0869 	.word	0x080a0869

080a09d0 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a09d0:	4770      	bx	lr

080a09d2 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a09d2:	2200      	movs	r2, #0
 80a09d4:	4611      	mov	r1, r2
 80a09d6:	4610      	mov	r0, r2
 80a09d8:	f7ff bcc6 	b.w	80a0368 <network_ready>

080a09dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a09dc:	4803      	ldr	r0, [pc, #12]	; (80a09ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a09de:	4b04      	ldr	r3, [pc, #16]	; (80a09f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a09e0:	4a04      	ldr	r2, [pc, #16]	; (80a09f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x18>)
 80a09e2:	4905      	ldr	r1, [pc, #20]	; (80a09f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x1c>)
 80a09e4:	6003      	str	r3, [r0, #0]
 80a09e6:	f000 b94d 	b.w	80a0c84 <__aeabi_atexit>
 80a09ea:	bf00      	nop
 80a09ec:	200007ec 	.word	0x200007ec
 80a09f0:	080a11c0 	.word	0x080a11c0
 80a09f4:	2000036c 	.word	0x2000036c
 80a09f8:	080a09d1 	.word	0x080a09d1

080a09fc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a09fc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a09fe:	4b14      	ldr	r3, [pc, #80]	; (80a0a50 <serialEventRun+0x54>)
 80a0a00:	b133      	cbz	r3, 80a0a10 <serialEventRun+0x14>
 80a0a02:	f7ff ff83 	bl	80a090c <_Z16_fetch_usbserialv>
 80a0a06:	6803      	ldr	r3, [r0, #0]
 80a0a08:	691b      	ldr	r3, [r3, #16]
 80a0a0a:	4798      	blx	r3
 80a0a0c:	2800      	cmp	r0, #0
 80a0a0e:	dc16      	bgt.n	80a0a3e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0a10:	4b10      	ldr	r3, [pc, #64]	; (80a0a54 <serialEventRun+0x58>)
 80a0a12:	b133      	cbz	r3, 80a0a22 <serialEventRun+0x26>
 80a0a14:	f7ff ff00 	bl	80a0818 <_Z22__fetch_global_Serial1v>
 80a0a18:	6803      	ldr	r3, [r0, #0]
 80a0a1a:	691b      	ldr	r3, [r3, #16]
 80a0a1c:	4798      	blx	r3
 80a0a1e:	2800      	cmp	r0, #0
 80a0a20:	dc10      	bgt.n	80a0a44 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0a22:	4b0d      	ldr	r3, [pc, #52]	; (80a0a58 <serialEventRun+0x5c>)
 80a0a24:	b10b      	cbz	r3, 80a0a2a <serialEventRun+0x2e>
 80a0a26:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0a2a:	4b0c      	ldr	r3, [pc, #48]	; (80a0a5c <serialEventRun+0x60>)
 80a0a2c:	b17b      	cbz	r3, 80a0a4e <serialEventRun+0x52>
 80a0a2e:	f7ff ffa9 	bl	80a0984 <_Z17_fetch_usbserial1v>
 80a0a32:	6803      	ldr	r3, [r0, #0]
 80a0a34:	691b      	ldr	r3, [r3, #16]
 80a0a36:	4798      	blx	r3
 80a0a38:	2800      	cmp	r0, #0
 80a0a3a:	dc06      	bgt.n	80a0a4a <serialEventRun+0x4e>
 80a0a3c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0a3e:	f3af 8000 	nop.w
 80a0a42:	e7e5      	b.n	80a0a10 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0a44:	f3af 8000 	nop.w
 80a0a48:	e7eb      	b.n	80a0a22 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0a4a:	f3af 8000 	nop.w
 80a0a4e:	bd08      	pop	{r3, pc}
	...

080a0a60 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0a60:	b508      	push	{r3, lr}
	serialEventRun();
 80a0a62:	f7ff ffcb 	bl	80a09fc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0a66:	f7ff fb71 	bl	80a014c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0a6a:	4b01      	ldr	r3, [pc, #4]	; (80a0a70 <_post_loop+0x10>)
 80a0a6c:	6018      	str	r0, [r3, #0]
 80a0a6e:	bd08      	pop	{r3, pc}
 80a0a70:	200007f8 	.word	0x200007f8

080a0a74 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0a74:	4802      	ldr	r0, [pc, #8]	; (80a0a80 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0a76:	4a03      	ldr	r2, [pc, #12]	; (80a0a84 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0a78:	4903      	ldr	r1, [pc, #12]	; (80a0a88 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0a7a:	1a12      	subs	r2, r2, r0
 80a0a7c:	f000 ba5e 	b.w	80a0f3c <memcpy>
 80a0a80:	40024000 	.word	0x40024000
 80a0a84:	40024004 	.word	0x40024004
 80a0a88:	080a1260 	.word	0x080a1260

080a0a8c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0a8c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0a8e:	2300      	movs	r3, #0
 80a0a90:	9300      	str	r3, [sp, #0]
 80a0a92:	461a      	mov	r2, r3
 80a0a94:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0a98:	f7ff fc4c 	bl	80a0334 <system_ctrl_set_result>
}
 80a0a9c:	b003      	add	sp, #12
 80a0a9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0aa4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0aa4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0aa6:	8843      	ldrh	r3, [r0, #2]
 80a0aa8:	2b0a      	cmp	r3, #10
 80a0aaa:	d008      	beq.n	80a0abe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0aac:	2b50      	cmp	r3, #80	; 0x50
 80a0aae:	d109      	bne.n	80a0ac4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0ab0:	4b09      	ldr	r3, [pc, #36]	; (80a0ad8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0ab2:	681b      	ldr	r3, [r3, #0]
 80a0ab4:	b13b      	cbz	r3, 80a0ac6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0ab6:	b003      	add	sp, #12
 80a0ab8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0abc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0abe:	f7ff ffe5 	bl	80a0a8c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0ac2:	e006      	b.n	80a0ad2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0ac4:	2300      	movs	r3, #0
 80a0ac6:	9300      	str	r3, [sp, #0]
 80a0ac8:	461a      	mov	r2, r3
 80a0aca:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0ace:	f7ff fc31 	bl	80a0334 <system_ctrl_set_result>
        break;
    }
}
 80a0ad2:	b003      	add	sp, #12
 80a0ad4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0ad8:	200007f0 	.word	0x200007f0

080a0adc <module_user_init_hook>:

void module_user_init_hook()
{
 80a0adc:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0ade:	4c10      	ldr	r4, [pc, #64]	; (80a0b20 <module_user_init_hook+0x44>)
 80a0ae0:	4d10      	ldr	r5, [pc, #64]	; (80a0b24 <module_user_init_hook+0x48>)
 80a0ae2:	6823      	ldr	r3, [r4, #0]
 80a0ae4:	42ab      	cmp	r3, r5
 80a0ae6:	4b10      	ldr	r3, [pc, #64]	; (80a0b28 <module_user_init_hook+0x4c>)
 80a0ae8:	bf0c      	ite	eq
 80a0aea:	2201      	moveq	r2, #1
 80a0aec:	2200      	movne	r2, #0
 80a0aee:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0af0:	d002      	beq.n	80a0af8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0af2:	f7ff ffbf 	bl	80a0a74 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0af6:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 80a0af8:	f7ff fb20 	bl	80a013c <HAL_RNG_GetRandomNumber>
 80a0afc:	f000 fa32 	bl	80a0f64 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0b00:	4b0a      	ldr	r3, [pc, #40]	; (80a0b2c <module_user_init_hook+0x50>)
 80a0b02:	b11b      	cbz	r3, 80a0b0c <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0b04:	f7ff fb1a 	bl	80a013c <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 80a0b08:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0b0c:	2100      	movs	r1, #0
 80a0b0e:	4807      	ldr	r0, [pc, #28]	; (80a0b2c <module_user_init_hook+0x50>)
 80a0b10:	f7ff fc22 	bl	80a0358 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0b18:	2100      	movs	r1, #0
 80a0b1a:	4805      	ldr	r0, [pc, #20]	; (80a0b30 <module_user_init_hook+0x54>)
 80a0b1c:	f7ff bc00 	b.w	80a0320 <system_ctrl_set_app_request_handler>
 80a0b20:	40024000 	.word	0x40024000
 80a0b24:	9a271c1e 	.word	0x9a271c1e
 80a0b28:	200007f4 	.word	0x200007f4
 80a0b2c:	00000000 	.word	0x00000000
 80a0b30:	080a0aa5 	.word	0x080a0aa5

080a0b34 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a0b34:	b510      	push	{r4, lr}
 80a0b36:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a0b38:	480f      	ldr	r0, [pc, #60]	; (80a0b78 <pinAvailable+0x44>)
 80a0b3a:	f7ff fd75 	bl	80a0628 <_ZN8SPIClass9isEnabledEv>
 80a0b3e:	b128      	cbz	r0, 80a0b4c <pinAvailable+0x18>
 80a0b40:	f1a4 030d 	sub.w	r3, r4, #13
 80a0b44:	2b02      	cmp	r3, #2
 80a0b46:	d801      	bhi.n	80a0b4c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a0b48:	2000      	movs	r0, #0
 80a0b4a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a0b4c:	f000 f840 	bl	80a0bd0 <_Z19__fetch_global_Wirev>
 80a0b50:	f7ff fc9e 	bl	80a0490 <_ZN7TwoWire9isEnabledEv>
 80a0b54:	b108      	cbz	r0, 80a0b5a <pinAvailable+0x26>
 80a0b56:	2c01      	cmp	r4, #1
 80a0b58:	d9f6      	bls.n	80a0b48 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a0b5a:	f7ff fe5d 	bl	80a0818 <_Z22__fetch_global_Serial1v>
 80a0b5e:	f7ff fe57 	bl	80a0810 <_ZN11USARTSerial9isEnabledEv>
 80a0b62:	b118      	cbz	r0, 80a0b6c <pinAvailable+0x38>
 80a0b64:	f1a4 0312 	sub.w	r3, r4, #18
 80a0b68:	2b01      	cmp	r3, #1
 80a0b6a:	d9ed      	bls.n	80a0b48 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a0b6c:	2c17      	cmp	r4, #23
 80a0b6e:	bf8c      	ite	hi
 80a0b70:	2000      	movhi	r0, #0
 80a0b72:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a0b74:	bd10      	pop	{r4, pc}
 80a0b76:	bf00      	nop
 80a0b78:	2000082c 	.word	0x2000082c

080a0b7c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0b7c:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a0b7e:	b538      	push	{r3, r4, r5, lr}
 80a0b80:	4604      	mov	r4, r0
 80a0b82:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0b84:	d80a      	bhi.n	80a0b9c <pinMode+0x20>
 80a0b86:	29ff      	cmp	r1, #255	; 0xff
 80a0b88:	d008      	beq.n	80a0b9c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a0b8a:	f7ff ffd3 	bl	80a0b34 <pinAvailable>
 80a0b8e:	b128      	cbz	r0, 80a0b9c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0b90:	4629      	mov	r1, r5
 80a0b92:	4620      	mov	r0, r4
}
 80a0b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0b98:	f7ff bae8 	b.w	80a016c <HAL_Pin_Mode>
 80a0b9c:	bd38      	pop	{r3, r4, r5, pc}

080a0b9e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a0b9e:	b538      	push	{r3, r4, r5, lr}
 80a0ba0:	4604      	mov	r4, r0
 80a0ba2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0ba4:	f7ff faea 	bl	80a017c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a0ba8:	28ff      	cmp	r0, #255	; 0xff
 80a0baa:	d010      	beq.n	80a0bce <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a0bac:	2806      	cmp	r0, #6
 80a0bae:	d804      	bhi.n	80a0bba <digitalWrite+0x1c>
 80a0bb0:	234d      	movs	r3, #77	; 0x4d
 80a0bb2:	fa23 f000 	lsr.w	r0, r3, r0
 80a0bb6:	07c3      	lsls	r3, r0, #31
 80a0bb8:	d409      	bmi.n	80a0bce <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a0bba:	4620      	mov	r0, r4
 80a0bbc:	f7ff ffba 	bl	80a0b34 <pinAvailable>
 80a0bc0:	b128      	cbz	r0, 80a0bce <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0bc2:	4629      	mov	r1, r5
 80a0bc4:	4620      	mov	r0, r4
}
 80a0bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0bca:	f7ff badf 	b.w	80a018c <HAL_GPIO_Write>
 80a0bce:	bd38      	pop	{r3, r4, r5, pc}

080a0bd0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a0bd0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a0bd2:	4d0b      	ldr	r5, [pc, #44]	; (80a0c00 <_Z19__fetch_global_Wirev+0x30>)
 80a0bd4:	6829      	ldr	r1, [r5, #0]
 80a0bd6:	f011 0401 	ands.w	r4, r1, #1
 80a0bda:	d10f      	bne.n	80a0bfc <_Z19__fetch_global_Wirev+0x2c>
 80a0bdc:	4628      	mov	r0, r5
 80a0bde:	f7ff fa5e 	bl	80a009e <__cxa_guard_acquire>
 80a0be2:	b158      	cbz	r0, 80a0bfc <_Z19__fetch_global_Wirev+0x2c>
 80a0be4:	4621      	mov	r1, r4
 80a0be6:	4807      	ldr	r0, [pc, #28]	; (80a0c04 <_Z19__fetch_global_Wirev+0x34>)
 80a0be8:	f7ff fc40 	bl	80a046c <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a0bec:	4628      	mov	r0, r5
 80a0bee:	f7ff fa5b 	bl	80a00a8 <__cxa_guard_release>
 80a0bf2:	4a05      	ldr	r2, [pc, #20]	; (80a0c08 <_Z19__fetch_global_Wirev+0x38>)
 80a0bf4:	4905      	ldr	r1, [pc, #20]	; (80a0c0c <_Z19__fetch_global_Wirev+0x3c>)
 80a0bf6:	4803      	ldr	r0, [pc, #12]	; (80a0c04 <_Z19__fetch_global_Wirev+0x34>)
 80a0bf8:	f000 f844 	bl	80a0c84 <__aeabi_atexit>
	return wire;
}
 80a0bfc:	4801      	ldr	r0, [pc, #4]	; (80a0c04 <_Z19__fetch_global_Wirev+0x34>)
 80a0bfe:	bd38      	pop	{r3, r4, r5, pc}
 80a0c00:	200007fc 	.word	0x200007fc
 80a0c04:	20000800 	.word	0x20000800
 80a0c08:	2000036c 	.word	0x2000036c
 80a0c0c:	080a0415 	.word	0x080a0415

080a0c10 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0c10:	b513      	push	{r0, r1, r4, lr}
 80a0c12:	4c08      	ldr	r4, [pc, #32]	; (80a0c34 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0c14:	2300      	movs	r3, #0
 80a0c16:	461a      	mov	r2, r3
 80a0c18:	4619      	mov	r1, r3
 80a0c1a:	9300      	str	r3, [sp, #0]
 80a0c1c:	4620      	mov	r0, r4
 80a0c1e:	f7ff fc69 	bl	80a04f4 <_ZN9IPAddressC1Ehhhh>
 80a0c22:	4620      	mov	r0, r4
 80a0c24:	4a04      	ldr	r2, [pc, #16]	; (80a0c38 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0c26:	4905      	ldr	r1, [pc, #20]	; (80a0c3c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0c28:	b002      	add	sp, #8
 80a0c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0c2e:	f000 b829 	b.w	80a0c84 <__aeabi_atexit>
 80a0c32:	bf00      	nop
 80a0c34:	20000814 	.word	0x20000814
 80a0c38:	2000036c 	.word	0x2000036c
 80a0c3c:	080a0499 	.word	0x080a0499

080a0c40 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0c40:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0c42:	4c0c      	ldr	r4, [pc, #48]	; (80a0c74 <_GLOBAL__sub_I_SPI+0x34>)
 80a0c44:	4e0c      	ldr	r6, [pc, #48]	; (80a0c78 <_GLOBAL__sub_I_SPI+0x38>)
 80a0c46:	4d0d      	ldr	r5, [pc, #52]	; (80a0c7c <_GLOBAL__sub_I_SPI+0x3c>)
 80a0c48:	2100      	movs	r1, #0
 80a0c4a:	4620      	mov	r0, r4
 80a0c4c:	f7ff fcd8 	bl	80a0600 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0c50:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0c52:	4c0b      	ldr	r4, [pc, #44]	; (80a0c80 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0c54:	4632      	mov	r2, r6
 80a0c56:	4629      	mov	r1, r5
 80a0c58:	f000 f814 	bl	80a0c84 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0c5c:	2101      	movs	r1, #1
 80a0c5e:	4620      	mov	r0, r4
 80a0c60:	f7ff fcce 	bl	80a0600 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0c64:	4632      	mov	r2, r6
 80a0c66:	4629      	mov	r1, r5
 80a0c68:	4620      	mov	r0, r4
 80a0c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a0c6e:	f000 b809 	b.w	80a0c84 <__aeabi_atexit>
 80a0c72:	bf00      	nop
 80a0c74:	2000082c 	.word	0x2000082c
 80a0c78:	2000036c 	.word	0x2000036c
 80a0c7c:	080a05f1 	.word	0x080a05f1
 80a0c80:	2000083c 	.word	0x2000083c

080a0c84 <__aeabi_atexit>:
 80a0c84:	460b      	mov	r3, r1
 80a0c86:	4601      	mov	r1, r0
 80a0c88:	4618      	mov	r0, r3
 80a0c8a:	f000 b949 	b.w	80a0f20 <__cxa_atexit>
	...

080a0c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a0c90:	4b24      	ldr	r3, [pc, #144]	; (80a0d24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a0c92:	681a      	ldr	r2, [r3, #0]
 80a0c94:	07d0      	lsls	r0, r2, #31
 80a0c96:	bf5c      	itt	pl
 80a0c98:	2201      	movpl	r2, #1
 80a0c9a:	601a      	strpl	r2, [r3, #0]
 80a0c9c:	4b22      	ldr	r3, [pc, #136]	; (80a0d28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a0c9e:	681a      	ldr	r2, [r3, #0]
 80a0ca0:	07d1      	lsls	r1, r2, #31
 80a0ca2:	bf5c      	itt	pl
 80a0ca4:	2201      	movpl	r2, #1
 80a0ca6:	601a      	strpl	r2, [r3, #0]
 80a0ca8:	4b20      	ldr	r3, [pc, #128]	; (80a0d2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a0caa:	681a      	ldr	r2, [r3, #0]
 80a0cac:	07d2      	lsls	r2, r2, #31
 80a0cae:	bf5c      	itt	pl
 80a0cb0:	2201      	movpl	r2, #1
 80a0cb2:	601a      	strpl	r2, [r3, #0]
 80a0cb4:	4b1e      	ldr	r3, [pc, #120]	; (80a0d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a0cb6:	681a      	ldr	r2, [r3, #0]
 80a0cb8:	07d0      	lsls	r0, r2, #31
 80a0cba:	bf5c      	itt	pl
 80a0cbc:	2201      	movpl	r2, #1
 80a0cbe:	601a      	strpl	r2, [r3, #0]
 80a0cc0:	4b1c      	ldr	r3, [pc, #112]	; (80a0d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a0cc2:	681a      	ldr	r2, [r3, #0]
 80a0cc4:	07d1      	lsls	r1, r2, #31
 80a0cc6:	bf5c      	itt	pl
 80a0cc8:	2201      	movpl	r2, #1
 80a0cca:	601a      	strpl	r2, [r3, #0]
 80a0ccc:	4b1a      	ldr	r3, [pc, #104]	; (80a0d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a0cce:	681a      	ldr	r2, [r3, #0]
 80a0cd0:	07d2      	lsls	r2, r2, #31
 80a0cd2:	bf5c      	itt	pl
 80a0cd4:	2201      	movpl	r2, #1
 80a0cd6:	601a      	strpl	r2, [r3, #0]
 80a0cd8:	4b18      	ldr	r3, [pc, #96]	; (80a0d3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a0cda:	681a      	ldr	r2, [r3, #0]
 80a0cdc:	07d0      	lsls	r0, r2, #31
 80a0cde:	bf5c      	itt	pl
 80a0ce0:	2201      	movpl	r2, #1
 80a0ce2:	601a      	strpl	r2, [r3, #0]
 80a0ce4:	4b16      	ldr	r3, [pc, #88]	; (80a0d40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a0ce6:	681a      	ldr	r2, [r3, #0]
 80a0ce8:	07d1      	lsls	r1, r2, #31
 80a0cea:	bf5c      	itt	pl
 80a0cec:	2201      	movpl	r2, #1
 80a0cee:	601a      	strpl	r2, [r3, #0]
 80a0cf0:	4b14      	ldr	r3, [pc, #80]	; (80a0d44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a0cf2:	681a      	ldr	r2, [r3, #0]
 80a0cf4:	07d2      	lsls	r2, r2, #31
 80a0cf6:	bf5c      	itt	pl
 80a0cf8:	2201      	movpl	r2, #1
 80a0cfa:	601a      	strpl	r2, [r3, #0]
 80a0cfc:	4b12      	ldr	r3, [pc, #72]	; (80a0d48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a0cfe:	681a      	ldr	r2, [r3, #0]
 80a0d00:	07d0      	lsls	r0, r2, #31
 80a0d02:	bf5c      	itt	pl
 80a0d04:	2201      	movpl	r2, #1
 80a0d06:	601a      	strpl	r2, [r3, #0]
 80a0d08:	4b10      	ldr	r3, [pc, #64]	; (80a0d4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a0d0a:	681a      	ldr	r2, [r3, #0]
 80a0d0c:	07d1      	lsls	r1, r2, #31
 80a0d0e:	bf5c      	itt	pl
 80a0d10:	2201      	movpl	r2, #1
 80a0d12:	601a      	strpl	r2, [r3, #0]
 80a0d14:	4b0e      	ldr	r3, [pc, #56]	; (80a0d50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a0d16:	681a      	ldr	r2, [r3, #0]
 80a0d18:	07d2      	lsls	r2, r2, #31
 80a0d1a:	bf5c      	itt	pl
 80a0d1c:	2201      	movpl	r2, #1
 80a0d1e:	601a      	strpl	r2, [r3, #0]
 80a0d20:	4770      	bx	lr
 80a0d22:	bf00      	nop
 80a0d24:	20000878 	.word	0x20000878
 80a0d28:	20000874 	.word	0x20000874
 80a0d2c:	20000870 	.word	0x20000870
 80a0d30:	2000086c 	.word	0x2000086c
 80a0d34:	20000868 	.word	0x20000868
 80a0d38:	20000864 	.word	0x20000864
 80a0d3c:	20000860 	.word	0x20000860
 80a0d40:	2000085c 	.word	0x2000085c
 80a0d44:	20000858 	.word	0x20000858
 80a0d48:	20000854 	.word	0x20000854
 80a0d4c:	20000850 	.word	0x20000850
 80a0d50:	2000084c 	.word	0x2000084c

080a0d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0d54:	4b18      	ldr	r3, [pc, #96]	; (80a0db8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0d56:	681a      	ldr	r2, [r3, #0]
 80a0d58:	07d1      	lsls	r1, r2, #31
 80a0d5a:	bf5c      	itt	pl
 80a0d5c:	2201      	movpl	r2, #1
 80a0d5e:	601a      	strpl	r2, [r3, #0]
 80a0d60:	4b16      	ldr	r3, [pc, #88]	; (80a0dbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0d62:	681a      	ldr	r2, [r3, #0]
 80a0d64:	07d2      	lsls	r2, r2, #31
 80a0d66:	bf5c      	itt	pl
 80a0d68:	2201      	movpl	r2, #1
 80a0d6a:	601a      	strpl	r2, [r3, #0]
 80a0d6c:	4b14      	ldr	r3, [pc, #80]	; (80a0dc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0d6e:	681a      	ldr	r2, [r3, #0]
 80a0d70:	07d0      	lsls	r0, r2, #31
 80a0d72:	bf5c      	itt	pl
 80a0d74:	2201      	movpl	r2, #1
 80a0d76:	601a      	strpl	r2, [r3, #0]
 80a0d78:	4b12      	ldr	r3, [pc, #72]	; (80a0dc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0d7a:	681a      	ldr	r2, [r3, #0]
 80a0d7c:	07d1      	lsls	r1, r2, #31
 80a0d7e:	bf5c      	itt	pl
 80a0d80:	2201      	movpl	r2, #1
 80a0d82:	601a      	strpl	r2, [r3, #0]
 80a0d84:	4b10      	ldr	r3, [pc, #64]	; (80a0dc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0d86:	681a      	ldr	r2, [r3, #0]
 80a0d88:	07d2      	lsls	r2, r2, #31
 80a0d8a:	bf5c      	itt	pl
 80a0d8c:	2201      	movpl	r2, #1
 80a0d8e:	601a      	strpl	r2, [r3, #0]
 80a0d90:	4b0e      	ldr	r3, [pc, #56]	; (80a0dcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a0d92:	681a      	ldr	r2, [r3, #0]
 80a0d94:	07d0      	lsls	r0, r2, #31
 80a0d96:	bf5c      	itt	pl
 80a0d98:	2201      	movpl	r2, #1
 80a0d9a:	601a      	strpl	r2, [r3, #0]
 80a0d9c:	4b0c      	ldr	r3, [pc, #48]	; (80a0dd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a0d9e:	681a      	ldr	r2, [r3, #0]
 80a0da0:	07d1      	lsls	r1, r2, #31
 80a0da2:	bf5c      	itt	pl
 80a0da4:	2201      	movpl	r2, #1
 80a0da6:	601a      	strpl	r2, [r3, #0]
 80a0da8:	4b0a      	ldr	r3, [pc, #40]	; (80a0dd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a0daa:	681a      	ldr	r2, [r3, #0]
 80a0dac:	07d2      	lsls	r2, r2, #31
 80a0dae:	bf5c      	itt	pl
 80a0db0:	2201      	movpl	r2, #1
 80a0db2:	601a      	strpl	r2, [r3, #0]
 80a0db4:	4770      	bx	lr
 80a0db6:	bf00      	nop
 80a0db8:	20000898 	.word	0x20000898
 80a0dbc:	20000894 	.word	0x20000894
 80a0dc0:	20000890 	.word	0x20000890
 80a0dc4:	2000088c 	.word	0x2000088c
 80a0dc8:	20000888 	.word	0x20000888
 80a0dcc:	20000884 	.word	0x20000884
 80a0dd0:	20000880 	.word	0x20000880
 80a0dd4:	2000087c 	.word	0x2000087c

080a0dd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0dd8:	4b18      	ldr	r3, [pc, #96]	; (80a0e3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0dda:	681a      	ldr	r2, [r3, #0]
 80a0ddc:	07d1      	lsls	r1, r2, #31
 80a0dde:	bf5c      	itt	pl
 80a0de0:	2201      	movpl	r2, #1
 80a0de2:	601a      	strpl	r2, [r3, #0]
 80a0de4:	4b16      	ldr	r3, [pc, #88]	; (80a0e40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0de6:	681a      	ldr	r2, [r3, #0]
 80a0de8:	07d2      	lsls	r2, r2, #31
 80a0dea:	bf5c      	itt	pl
 80a0dec:	2201      	movpl	r2, #1
 80a0dee:	601a      	strpl	r2, [r3, #0]
 80a0df0:	4b14      	ldr	r3, [pc, #80]	; (80a0e44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0df2:	681a      	ldr	r2, [r3, #0]
 80a0df4:	07d0      	lsls	r0, r2, #31
 80a0df6:	bf5c      	itt	pl
 80a0df8:	2201      	movpl	r2, #1
 80a0dfa:	601a      	strpl	r2, [r3, #0]
 80a0dfc:	4b12      	ldr	r3, [pc, #72]	; (80a0e48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0dfe:	681a      	ldr	r2, [r3, #0]
 80a0e00:	07d1      	lsls	r1, r2, #31
 80a0e02:	bf5c      	itt	pl
 80a0e04:	2201      	movpl	r2, #1
 80a0e06:	601a      	strpl	r2, [r3, #0]
 80a0e08:	4b10      	ldr	r3, [pc, #64]	; (80a0e4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0e0a:	681a      	ldr	r2, [r3, #0]
 80a0e0c:	07d2      	lsls	r2, r2, #31
 80a0e0e:	bf5c      	itt	pl
 80a0e10:	2201      	movpl	r2, #1
 80a0e12:	601a      	strpl	r2, [r3, #0]
 80a0e14:	4b0e      	ldr	r3, [pc, #56]	; (80a0e50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a0e16:	681a      	ldr	r2, [r3, #0]
 80a0e18:	07d0      	lsls	r0, r2, #31
 80a0e1a:	bf5c      	itt	pl
 80a0e1c:	2201      	movpl	r2, #1
 80a0e1e:	601a      	strpl	r2, [r3, #0]
 80a0e20:	4b0c      	ldr	r3, [pc, #48]	; (80a0e54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a0e22:	681a      	ldr	r2, [r3, #0]
 80a0e24:	07d1      	lsls	r1, r2, #31
 80a0e26:	bf5c      	itt	pl
 80a0e28:	2201      	movpl	r2, #1
 80a0e2a:	601a      	strpl	r2, [r3, #0]
 80a0e2c:	4b0a      	ldr	r3, [pc, #40]	; (80a0e58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a0e2e:	681a      	ldr	r2, [r3, #0]
 80a0e30:	07d2      	lsls	r2, r2, #31
 80a0e32:	bf5c      	itt	pl
 80a0e34:	2201      	movpl	r2, #1
 80a0e36:	601a      	strpl	r2, [r3, #0]
 80a0e38:	4770      	bx	lr
 80a0e3a:	bf00      	nop
 80a0e3c:	200008b8 	.word	0x200008b8
 80a0e40:	200008b4 	.word	0x200008b4
 80a0e44:	200008b0 	.word	0x200008b0
 80a0e48:	200008ac 	.word	0x200008ac
 80a0e4c:	200008a8 	.word	0x200008a8
 80a0e50:	200008a4 	.word	0x200008a4
 80a0e54:	200008a0 	.word	0x200008a0
 80a0e58:	2000089c 	.word	0x2000089c

080a0e5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a0e5c:	4b24      	ldr	r3, [pc, #144]	; (80a0ef0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a0e5e:	681a      	ldr	r2, [r3, #0]
 80a0e60:	07d0      	lsls	r0, r2, #31
 80a0e62:	bf5c      	itt	pl
 80a0e64:	2201      	movpl	r2, #1
 80a0e66:	601a      	strpl	r2, [r3, #0]
 80a0e68:	4b22      	ldr	r3, [pc, #136]	; (80a0ef4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a0e6a:	681a      	ldr	r2, [r3, #0]
 80a0e6c:	07d1      	lsls	r1, r2, #31
 80a0e6e:	bf5c      	itt	pl
 80a0e70:	2201      	movpl	r2, #1
 80a0e72:	601a      	strpl	r2, [r3, #0]
 80a0e74:	4b20      	ldr	r3, [pc, #128]	; (80a0ef8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a0e76:	681a      	ldr	r2, [r3, #0]
 80a0e78:	07d2      	lsls	r2, r2, #31
 80a0e7a:	bf5c      	itt	pl
 80a0e7c:	2201      	movpl	r2, #1
 80a0e7e:	601a      	strpl	r2, [r3, #0]
 80a0e80:	4b1e      	ldr	r3, [pc, #120]	; (80a0efc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a0e82:	681a      	ldr	r2, [r3, #0]
 80a0e84:	07d0      	lsls	r0, r2, #31
 80a0e86:	bf5c      	itt	pl
 80a0e88:	2201      	movpl	r2, #1
 80a0e8a:	601a      	strpl	r2, [r3, #0]
 80a0e8c:	4b1c      	ldr	r3, [pc, #112]	; (80a0f00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a0e8e:	681a      	ldr	r2, [r3, #0]
 80a0e90:	07d1      	lsls	r1, r2, #31
 80a0e92:	bf5c      	itt	pl
 80a0e94:	2201      	movpl	r2, #1
 80a0e96:	601a      	strpl	r2, [r3, #0]
 80a0e98:	4b1a      	ldr	r3, [pc, #104]	; (80a0f04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a0e9a:	681a      	ldr	r2, [r3, #0]
 80a0e9c:	07d2      	lsls	r2, r2, #31
 80a0e9e:	bf5c      	itt	pl
 80a0ea0:	2201      	movpl	r2, #1
 80a0ea2:	601a      	strpl	r2, [r3, #0]
 80a0ea4:	4b18      	ldr	r3, [pc, #96]	; (80a0f08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a0ea6:	681a      	ldr	r2, [r3, #0]
 80a0ea8:	07d0      	lsls	r0, r2, #31
 80a0eaa:	bf5c      	itt	pl
 80a0eac:	2201      	movpl	r2, #1
 80a0eae:	601a      	strpl	r2, [r3, #0]
 80a0eb0:	4b16      	ldr	r3, [pc, #88]	; (80a0f0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a0eb2:	681a      	ldr	r2, [r3, #0]
 80a0eb4:	07d1      	lsls	r1, r2, #31
 80a0eb6:	bf5c      	itt	pl
 80a0eb8:	2201      	movpl	r2, #1
 80a0eba:	601a      	strpl	r2, [r3, #0]
 80a0ebc:	4b14      	ldr	r3, [pc, #80]	; (80a0f10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a0ebe:	681a      	ldr	r2, [r3, #0]
 80a0ec0:	07d2      	lsls	r2, r2, #31
 80a0ec2:	bf5c      	itt	pl
 80a0ec4:	2201      	movpl	r2, #1
 80a0ec6:	601a      	strpl	r2, [r3, #0]
 80a0ec8:	4b12      	ldr	r3, [pc, #72]	; (80a0f14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a0eca:	681a      	ldr	r2, [r3, #0]
 80a0ecc:	07d0      	lsls	r0, r2, #31
 80a0ece:	bf5c      	itt	pl
 80a0ed0:	2201      	movpl	r2, #1
 80a0ed2:	601a      	strpl	r2, [r3, #0]
 80a0ed4:	4b10      	ldr	r3, [pc, #64]	; (80a0f18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a0ed6:	681a      	ldr	r2, [r3, #0]
 80a0ed8:	07d1      	lsls	r1, r2, #31
 80a0eda:	bf5c      	itt	pl
 80a0edc:	2201      	movpl	r2, #1
 80a0ede:	601a      	strpl	r2, [r3, #0]
 80a0ee0:	4b0e      	ldr	r3, [pc, #56]	; (80a0f1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a0ee2:	681a      	ldr	r2, [r3, #0]
 80a0ee4:	07d2      	lsls	r2, r2, #31
 80a0ee6:	bf5c      	itt	pl
 80a0ee8:	2201      	movpl	r2, #1
 80a0eea:	601a      	strpl	r2, [r3, #0]
 80a0eec:	4770      	bx	lr
 80a0eee:	bf00      	nop
 80a0ef0:	200008e8 	.word	0x200008e8
 80a0ef4:	200008e4 	.word	0x200008e4
 80a0ef8:	200008e0 	.word	0x200008e0
 80a0efc:	200008dc 	.word	0x200008dc
 80a0f00:	200008d8 	.word	0x200008d8
 80a0f04:	200008d4 	.word	0x200008d4
 80a0f08:	200008d0 	.word	0x200008d0
 80a0f0c:	200008cc 	.word	0x200008cc
 80a0f10:	200008c8 	.word	0x200008c8
 80a0f14:	200008c4 	.word	0x200008c4
 80a0f18:	200008c0 	.word	0x200008c0
 80a0f1c:	200008bc 	.word	0x200008bc

080a0f20 <__cxa_atexit>:
 80a0f20:	b510      	push	{r4, lr}
 80a0f22:	4c05      	ldr	r4, [pc, #20]	; (80a0f38 <__cxa_atexit+0x18>)
 80a0f24:	4613      	mov	r3, r2
 80a0f26:	b12c      	cbz	r4, 80a0f34 <__cxa_atexit+0x14>
 80a0f28:	460a      	mov	r2, r1
 80a0f2a:	4601      	mov	r1, r0
 80a0f2c:	2002      	movs	r0, #2
 80a0f2e:	f3af 8000 	nop.w
 80a0f32:	bd10      	pop	{r4, pc}
 80a0f34:	4620      	mov	r0, r4
 80a0f36:	bd10      	pop	{r4, pc}
 80a0f38:	00000000 	.word	0x00000000

080a0f3c <memcpy>:
 80a0f3c:	b510      	push	{r4, lr}
 80a0f3e:	1e43      	subs	r3, r0, #1
 80a0f40:	440a      	add	r2, r1
 80a0f42:	4291      	cmp	r1, r2
 80a0f44:	d004      	beq.n	80a0f50 <memcpy+0x14>
 80a0f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a0f4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a0f4e:	e7f8      	b.n	80a0f42 <memcpy+0x6>
 80a0f50:	bd10      	pop	{r4, pc}

080a0f52 <memset>:
 80a0f52:	4603      	mov	r3, r0
 80a0f54:	4402      	add	r2, r0
 80a0f56:	4293      	cmp	r3, r2
 80a0f58:	d002      	beq.n	80a0f60 <memset+0xe>
 80a0f5a:	f803 1b01 	strb.w	r1, [r3], #1
 80a0f5e:	e7fa      	b.n	80a0f56 <memset+0x4>
 80a0f60:	4770      	bx	lr
	...

080a0f64 <srand>:
 80a0f64:	b538      	push	{r3, r4, r5, lr}
 80a0f66:	4b12      	ldr	r3, [pc, #72]	; (80a0fb0 <srand+0x4c>)
 80a0f68:	4605      	mov	r5, r0
 80a0f6a:	681c      	ldr	r4, [r3, #0]
 80a0f6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a0f6e:	b9d3      	cbnz	r3, 80a0fa6 <srand+0x42>
 80a0f70:	2018      	movs	r0, #24
 80a0f72:	f7ff fa01 	bl	80a0378 <malloc>
 80a0f76:	f243 330e 	movw	r3, #13070	; 0x330e
 80a0f7a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a0f7c:	8003      	strh	r3, [r0, #0]
 80a0f7e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a0f82:	8043      	strh	r3, [r0, #2]
 80a0f84:	f241 2334 	movw	r3, #4660	; 0x1234
 80a0f88:	8083      	strh	r3, [r0, #4]
 80a0f8a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a0f8e:	80c3      	strh	r3, [r0, #6]
 80a0f90:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a0f94:	8103      	strh	r3, [r0, #8]
 80a0f96:	2305      	movs	r3, #5
 80a0f98:	8143      	strh	r3, [r0, #10]
 80a0f9a:	230b      	movs	r3, #11
 80a0f9c:	8183      	strh	r3, [r0, #12]
 80a0f9e:	2201      	movs	r2, #1
 80a0fa0:	2300      	movs	r3, #0
 80a0fa2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a0fa6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a0fa8:	2200      	movs	r2, #0
 80a0faa:	611d      	str	r5, [r3, #16]
 80a0fac:	615a      	str	r2, [r3, #20]
 80a0fae:	bd38      	pop	{r3, r4, r5, pc}
 80a0fb0:	20000368 	.word	0x20000368

080a0fb4 <strcmp>:
 80a0fb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a0fb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a0fbc:	2a01      	cmp	r2, #1
 80a0fbe:	bf28      	it	cs
 80a0fc0:	429a      	cmpcs	r2, r3
 80a0fc2:	d0f7      	beq.n	80a0fb4 <strcmp>
 80a0fc4:	1ad0      	subs	r0, r2, r3
 80a0fc6:	4770      	bx	lr

080a0fc8 <strlen>:
 80a0fc8:	4603      	mov	r3, r0
 80a0fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a0fce:	2a00      	cmp	r2, #0
 80a0fd0:	d1fb      	bne.n	80a0fca <strlen+0x2>
 80a0fd2:	1a18      	subs	r0, r3, r0
 80a0fd4:	3801      	subs	r0, #1
 80a0fd6:	4770      	bx	lr

080a0fd8 <dynalib_user>:
 80a0fd8:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a0fe8:	0000 0000 6e6f 6f00 6666 7400 676f 6c67     ....on.off.toggl
 80a0ff8:	0065 0000                                   e...

080a0ffc <_ZTV7TwoWire>:
	...
 80a1004:	0415 080a 045f 080a 0437 080a 0417 080a     ...._...7.......
 80a1014:	043f 080a 0447 080a 044f 080a 0457 080a     ?...G...O...W...

080a1024 <_ZTV9IPAddress>:
	...
 80a102c:	04a7 080a 0499 080a 049b 080a 6e6c 6600     ............ln.f
 80a103c:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
 80a104c:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
 80a105c:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
 80a106c:	2500 0069 6564 6174 6c69 2073 203d 6200     .%i.details = .b
 80a107c:	7561 0064 6553 6972 6c61 5500 4253 6553     aud.Serial.USBSe
 80a108c:	6972 6c61 0031 7974 6570 7000 7261 6d61     rial1.type.param
 80a109c:	6300 646d 6900 0064 6e68 0064 7473 6d72     .cmd.id.hnd.strm
 80a10ac:	6600 6c69 0074 766c 006c 6461 4864 6e61     .filt.lvl.addHan
 80a10bc:	6c64 7265 7200 6d65 766f 4865 6e61 6c64     dler.removeHandl
 80a10cc:	7265 6500 756e 486d 6e61 6c64 7265 0073     er.enumHandlers.
 80a10dc:	534a 4e4f 7453 6572 6d61 6f4c 4867 6e61     JSONStreamLogHan
 80a10ec:	6c64 7265 6100 7070 6e00 6e6f 0065 7274     dler.app.none.tr
 80a10fc:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a110c:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a111c <_ZTV8SPIClass>:
	...
 80a1124:	05f1 080a 05f3 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a1134:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a1144:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a1154:	0000 0000                                   ....

080a1158 <_ZTV11USARTSerial>:
	...
 80a1160:	0791 080a 07b5 080a 07c1 080a 051d 080a     ................
 80a1170:	079d 080a 07a9 080a 07a3 080a 07af 080a     ................
 80a1180:	0793 080a 0797 080a                         ........

080a1188 <_ZTV9USBSerial>:
	...
 80a1190:	0869 080a 08ad 080a 0887 080a 051d 080a     i...............
 80a11a0:	0881 080a 086b 080a 0873 080a 08a7 080a     ....k...s.......
 80a11b0:	087b 080a 0865 080a                         {...e...

080a11b8 <_ZTVN5spark9WiFiClassE>:
	...
 80a11c0:	09d3 080a                                   ....

080a11c4 <__sf_fake_stdin>:
	...

080a11e4 <__sf_fake_stdout>:
	...

080a1204 <__sf_fake_stderr>:
	...
 80a1224:	0043                                        C.

080a1226 <link_const_variable_data_end>:
	...

080a1228 <link_constructors_location>:
 80a1228:	080a0117 	.word	0x080a0117
 80a122c:	080a050d 	.word	0x080a050d
 80a1230:	080a05d5 	.word	0x080a05d5
 80a1234:	080a073d 	.word	0x080a073d
 80a1238:	080a077d 	.word	0x080a077d
 80a123c:	080a09dd 	.word	0x080a09dd
 80a1240:	080a0c11 	.word	0x080a0c11
 80a1244:	080a0c41 	.word	0x080a0c41
 80a1248:	080a0c91 	.word	0x080a0c91
 80a124c:	080a0d55 	.word	0x080a0d55
 80a1250:	080a0dd9 	.word	0x080a0dd9
 80a1254:	080a0e5d 	.word	0x080a0e5d

080a1258 <link_constructors_end>:
	...
